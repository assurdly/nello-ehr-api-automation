var jsonData = pm.response.json();

pm.test("Response has status code 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response contains expected fields", function () {
    pm.expect(jsonData).to.have.property("status").that.is.a("string");
    pm.expect(jsonData).to.have.property("diagnosis").that.is.an("array").and.to.have.length.above(0);
});

pm.test("Response content is correct", function () {
    pm.expect(jsonData.status).to.eql("success");
});

pm.test("Diagnosis contains required fields", function () {
    var diagnosis = jsonData.diagnosis[0];
    pm.expect(diagnosis).to.have.property("_id").that.is.a("string").and.to.not.be.empty;
    pm.expect(diagnosis).to.have.property("code").that.is.a("string").and.to.not.be.empty;
    pm.expect(diagnosis).to.have.property("name").that.is.a("string").and.to.not.be.empty;
    //pm.expect(diagnosis).to.have.property("createdAt").that.is.a("string"); //.and.to.not.be.empty was not added here because the initial implementation did not have this field, but the update once have. So the system would pull old diagnosis and fail this and the one below.
    //pm.expect(diagnosis).to.have.property("updatedAt").that.is.a("string")
});
