{
	"info": {
		"_postman_id": "af1507c9-ef9c-4a33-9f07-b55a72023f36",
		"name": "FamaEMR - Test pack",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "SUPER_ADMIN",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Authentication - Register (staff)",
							"item": [
								{
									"name": "Login(staff) - Authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"super_admin_token\", jsonData.token)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6e46b73c-2fcf-4012-b4ab-6b4775866d8b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukemeka@famacare.com\",\n    \"password\":\"Famacare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff) - Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb90aa48-33a0-4bba-a49d-3cf8680bbe55",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"doctor_token\", jsonData.token)\r",
													"\r",
													"pm.test(\"Status is success and response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"User details and token exist\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.token).to.be.a(\"string\").and.to.have.length.above(10);\r",
													"    pm.expect(jsonData.user._id).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.user.isActive).to.be.true;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3119846c-9450-4740-93bc-9ed69e07fcd9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Successful Clinical registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful user registration message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"user created successfully\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response body contains success object\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7c64456b-45f2-430b-bbcb-7e275a71b519",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{super_admin_token}}"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Tayo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"{{$randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Doctor\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //compulsory for only clinical staff (i.e Doctor, Nurse, etc), else optional\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Successful Non-Clinical registration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains success object\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Successful user registration message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"user created successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1a1922b4-f792-42d6-86e7-7ec8ca8f8da5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires Super Admin token Authentication\n    \"firstname\":\"Timo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"{{$randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Receptionist\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\"\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    //\"fee\":\"8000\",\n    //\"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Clinical - Email Exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message about a duplicate email is returned\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"User with email already exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0a0c5721-c173-4374-a5c1-704b825a2d48",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Tayo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morga@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Doctor\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - NonClinical - Email Exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response object is returned failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message about the existing email is returned\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"user with email already exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "51c17cdb-6ced-4592-82e7-4219a57b7ed1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Timo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan6@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Receptionist\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\"\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    //\"fee\":\"8000\",\n    //\"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Clinical - AOS-Fee-Required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"An error message should be flagged when AOS and fee are required\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Both fee and AOS are required for clinical staff\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "55369e1a-5168-4245-85a7-be35d170d775",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Tayo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"ezeklg+1@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Doctor\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //this request should fail, right?\n    \"fee\":\"8000\",\n    \"aos\":\"\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Clinical - Expired Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "209e390b-b2b0-4005-9f67-15f762e1943a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Tayo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan+1@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Doctor\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Unauthorized user access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Access denied message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Admins only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User information is included\", function () {\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"String\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\").and.to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"User role is unauthorized\", function () {\r",
													"    pm.expect([\"Receptionist\", \"Cashier\", \"User\", \"Nurse\", \"Doctor\"]).to.include(jsonData.user.role);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "35493972-120a-4a14-a919-0505d10b52fd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Tayo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan+1@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Doctor\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Role Required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Response status is failed\", function () {",
													"    pm.expect(jsonData.status).to.eql(\"failed\");",
													"});",
													"",
													"pm.test(\"Role field validation error exists\", function () {",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);",
													"    pm.expect(jsonData.error[0].path).to.eql(\"role\").and.not.to.be.null;",
													"    pm.expect(jsonData.error[0].msg).to.include(\"role is required\").and.not.to.be.null;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b31b7f89-fa1e-4ac5-adf0-f698f36c5868",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Tayo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan9@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Password Required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains failure status and password error details\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").that.is.not.empty;\r",
													"    pm.expect(jsonData.error[0].type).to.eql(\"field\");\r",
													"    pm.expect(jsonData.error[0].value).to.eql(\"\");\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"password\");\r",
													"    pm.expect(jsonData.error[0].location).to.eql(\"body\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message about the required password is returned\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"password is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ec18fba7-f448-4fe9-97b9-7f024a5e7793",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Tayo\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan8@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Doctor\", //refer to Roles -> Get Role\n    \"department\":\"\",\n    \"password\":\"\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Invalid token error message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5cfd0d7f-1c33-40ea-978f-8a68794f1a44",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Bunmii\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan0@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Super Admin\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - No Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is returned\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7ab0edd5-1fcd-497d-b2f5-480465929100",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Bunmii\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan0@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Super Admin\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"8000\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								},
								{
									"name": "Register(staff) - EmptyFee",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e9cb0f-6bc3-477a-acae-3e5b72d2e603",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains failure error details\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error[0].type).to.eql(\"field\");\r",
													"    pm.expect(jsonData.error[0].value).to.eql(\"\");\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"fee\");\r",
													"    pm.expect(jsonData.error[0].location).to.eql(\"body\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message about the required fee is returned\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"Fee must be a number\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a4e85cbd-145e-4944-b9f3-488a2075d8ab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {}
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    // requires  token Authorization\n    \"firstname\":\"Bunmi\",\n    \"lastname\":\"Bobson\",\n    \"email\":\"morgan3@assurdly.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"role\":\"Super Admin\", //refer to Roles -> Get Role\n    \"department\":\"Tech\",\n    \"password\":\"Password123!\",\n    \"gender\":\"Male\",\n\n    //optional (clinical staff only i.e Doctor, Nurse, etc)\n    \"fee\":\"\",\n    \"aos\":\"Dentist\"\n\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/register"
									},
									"response": []
								}
							],
							"id": "9fe526f8-a1b0-449a-984b-6ee23ed80f8e"
						},
						{
							"name": "Authentication - Login (staff) - Admin",
							"item": [
								{
									"name": "Login(staff) - Admin login successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200 with a success object\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"User details and token exist\", function () {\r",
													"    pm.expect(jsonData.token).to.be.a(\"string\").and.to.have.length.above(10);\r",
													"    pm.expect(jsonData.user._id).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.user.isActive).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "949df9ce-95a7-40ee-9b29-3bbe028137a7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukemeka@famacare.com\",\n    \"password\":\"Famacare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff)- Admin-Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Failure message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"User not found\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "693e5983-7a8e-4be8-830b-23df48f55857",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukddddddemeka@fam.com\",\n    \"password\":\"Famacare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff) - Admin- Invalid Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains an error array\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Error path is email\", function () {\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"email\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message specifies invalid email format\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"must be a valid email\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "51fd3e1f-e7c9-4919-b22a-e285be6c50a1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukemekafamcom\",\n    \"password\":\"Famacare123**\"\n}\n\n\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff) - Admin - Invalid Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Invalid credentials message is returned\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid email or password\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0006bccf-23a8-45ca-808c-dedb19bbee18",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukemeka@famacare.com\",\n    \"password\":\"Facare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								}
							],
							"id": "b2cc8341-2024-4204-9b7f-a32c1606449e"
						},
						{
							"name": "Authentication - Forgot Password",
							"item": [
								{
									"name": "Forgot Password - successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Success object is present\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.resetToken).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Successful reset message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"Password reset email sent\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "cc74d3ef-724e-46ce-82b9-6cd9efd9e683",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								},
								{
									"name": "Forgot Password - Invalid Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Incorrect email error message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Email not registered\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d26dfe18-6062-4617-8f2e-f67bd76a1af2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morg+1@assurdly.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								},
								{
									"name": "Forgot Password - Empty Email Field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Required email error message is returned\", function () {\r",
													"    pm.expect(jsonData.error[1].msg).to.eql(\"Email is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ad84f14f-b43e-47ad-a807-5feb606f38d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								}
							],
							"id": "2c3c5f49-d984-45c8-ad1a-d99e45bf4274"
						},
						{
							"name": "Authentication - Verify Token",
							"item": [
								{
									"name": "Verify Token - successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation is successful\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.true;\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.be.below(jsonData.user.exp);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "09c9eb39-c60f-435b-8b81-5cd094b3b5cc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"{{doctor_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								},
								{
									"name": "Verify Token- Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains an error array\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Error path is token\", function () {\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"token\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should specify that token is required\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"Token is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "41399726-e539-4c03-9318-18190c0e22ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								},
								{
									"name": "Verify Token - Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation error is returned\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.false;\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid or expired token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fb41d4e6-a612-4c95-9546-52a0397177f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								}
							],
							"id": "1c830035-28f2-464f-a25a-3fcca9632297"
						},
						{
							"name": "Authentication - Reset Password",
							"item": [
								{
									"name": "Reset Password - successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Password update was successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.message).to.include(\"Password updated successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "68109d4f-aca4-41ab-9487-ab26dd75c8c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfRMqCtkw\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password - Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation failed\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.false;\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid or expired token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bc3ca574-e67f-46f8-8594-27de1f9d9a90",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfR\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password - Invalid Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"User registration error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"User with email is not registered\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1f8a256a-2d98-4ab0-944a-417bb6f00f78",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"mor+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfRMqCtkw\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password - Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Required token error message is returned\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"Token is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d30ad6ff-d6e1-45bf-bf17-048aebb35e7e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"mor+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								}
							],
							"id": "f409bab5-579e-4084-9f7a-403ea1cdee75"
						}
					],
					"id": "a8126e2a-8e8f-421a-a9d8-b9451a0e9c58"
				},
				{
					"name": "Departments",
					"item": [
						{
							"name": "Departments - Create Department",
							"item": [
								{
									"name": "Login(staff) - Receptionist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb90aa48-33a0-4bba-a49d-3cf8680bbe55",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status is success and response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.environment.set(\"receptionist_token\", jsonData.token)\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "80f5581a-bb9b-46e9-b6ca-986ccaed8b3f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"judith.michael@famacare.com\",\n    \"password\":\"BOBson246**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Create Department - successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6437118b-3f4a-496b-8721-40ae499d9043",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Department data is returned\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.department).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.department.name).to.be.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(jsonData.department.isActive).to.be.true;\r",
													"    pm.expect(jsonData.department._id).to.be.a(\"string\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a8452c01-ae31-484a-b023-cc47e2618a45",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \n    \"name\":\"{{$randomWords}}\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}\n\n//Authoriziation : Super Admin token",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/department/create"
									},
									"response": []
								},
								{
									"name": "Create Department - Expired Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6437118b-3f4a-496b-8721-40ae499d9043",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "aea57dcb-29f9-48cb-b093-ec6ddeaef6a7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"name\":\"Mo Development\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}\n\n//Authoriziation : Super Admin token",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/department/create"
									},
									"response": []
								},
								{
									"name": "Create Department - Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6437118b-3f4a-496b-8721-40ae499d9043",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "910e04bf-211d-4311-9edb-b86e5512d317",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"name\":\"Mo Development\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}\n\n//Authoriziation : Super Admin token",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/department/create"
									},
									"response": []
								},
								{
									"name": "Create Department - Access Denied",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6437118b-3f4a-496b-8721-40ae499d9043",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Access denied message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Admins only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User information is included\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"User role is unauthorized\", function () {\r",
													"    pm.expect([\"Receptionist\", \"Doctor\"]).to.include(jsonData.user.role);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f1d1280f-60eb-4fa2-b49e-3e70b880d80e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"name\":\"Mo Development\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}\n\n//Authoriziation : Super Admin token",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/department/create"
									},
									"response": []
								},
								{
									"name": "Create Department - Department Already Exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6437118b-3f4a-496b-8721-40ae499d9043",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Department creation failure message is returned\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.include(\"Department with such name exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "155a9f78-b2f3-4012-99af-56a25cfc8728",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"name\":\"Mo Development\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}\n\n//Authoriziation : Super Admin token",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/department/create"
									},
									"response": []
								},
								{
									"name": "Create Department - Name Required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6437118b-3f4a-496b-8721-40ae499d9043",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Department validation failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"    pm.expect(jsonData.error[0].msg).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.error[1].msg).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"An error about the required Department name is returned\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"Department name is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c47473eb-112f-4bea-8179-48f9deddff30",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \n    \"name\":\"\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}\n\n//Authoriziation : Super Admin token",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/department/create"
									},
									"response": []
								}
							],
							"id": "d0193f9e-144c-488a-9ce1-7c906777954f"
						},
						{
							"name": "Departments - Fetch Departments",
							"item": [
								{
									"name": "Fetch Departments - Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Departments data is returned\", () => {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.departments).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"    pm.expect(jsonData.departments[0].name).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.departments[0].isActive).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e915ac8a-0a73-4c6a-8040-785f3cfd6982",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/department/office/{{office_uuid}}"
									},
									"response": []
								},
								{
									"name": "Fetch Departments -No Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is returned\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0ec7024a-e4bf-42f3-b47c-5862d1ff7168",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/department/office/{{office_uuid}}"
									},
									"response": []
								},
								{
									"name": "Fetch Departments -Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "089650f2-1b8a-4794-b17e-8008f13a2274",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/department/office/{{office_uuid}}"
									},
									"response": []
								},
								{
									"name": "Fetch Department - Office Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 404\", () => {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Office not found error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"office not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d2ad65a9-2d33-43a3-b535-ed1b246dc23d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/department/office/{{office_}}"
									},
									"response": []
								}
							],
							"id": "6e5a5ec8-52cc-46e6-b1de-4fbb4d704943"
						},
						{
							"name": "Departments - Update Department (no API)",
							"item": [],
							"id": "dbaf1893-41c6-4d8e-bcf9-a9787fc11a07"
						},
						{
							"name": "Departments - Delete (no API)",
							"item": [],
							"id": "67427b8f-3e62-47b7-9e16-af418a54dd3f"
						}
					],
					"id": "cd41e1b6-017c-498c-8cac-82762d1b3ce9"
				},
				{
					"name": "Roles",
					"item": [
						{
							"name": "Role - Create",
							"item": [
								{
									"name": "Create Role - successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "903d677f-3c20-4217-b38a-670e1326af99",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Role details are returned\", function () {\r",
													"    pm.expect(jsonData.role.office_uuid).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.role.name).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.role._id).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.role.createdAt).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.environment.set(\"role_id\", jsonData.role._id)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "63079ea6-cca3-4541-acc0-a453497dc770",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"{{$randomWord}}\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/role/create"
									},
									"response": []
								},
								{
									"name": "Create Role - Role Exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dcb447c-8d88-46e9-99f4-fc4cd73e9f45",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Role already exists error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Role already exists\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a63f34e1-9ccc-49ab-a7c2-503e4b289c63",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"NBA\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/role/create"
									},
									"response": []
								},
								{
									"name": "Create Role - Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a6afa25-b268-446e-b80c-5725b43f69d8",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a9faf3de-9297-4162-9dda-2f6121347064",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"NBA\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/role/create"
									},
									"response": []
								},
								{
									"name": "Create Role - Access Denied",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a6afa25-b268-446e-b80c-5725b43f69d8",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Access denied message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Admins only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User information is included\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\").and.to.not.be.null;;\r",
													"});\r",
													"\r",
													"pm.test(\"User role is unauthorized\", function () {\r",
													"    pm.expect([\"Receptionist\",\"Doctor\"]).to.include(jsonData.user.role);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "32008521-1f40-4c4c-88dc-8c9ffc649412",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"NBA\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/role/create"
									},
									"response": []
								},
								{
									"name": "Create Role - No Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a6afa25-b268-446e-b80c-5725b43f69d8",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0716aa89-adf0-47c0-a9b7-e498dcdfca01",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"NBA\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/role/create"
									},
									"response": []
								},
								{
									"name": "Create Role - Name Required",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34b781ef-1a4d-4760-a687-d151bc11881a",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error response is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Error details are correct\", function () {\r",
													"    pm.expect(jsonData.error[0].type).to.eql(\"field\");\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"name\");\r",
													"    pm.expect(jsonData.error[0].location).to.eql(\"body\");\r",
													"    pm.expect(jsonData.error[0].msg).to.be.a(\"string\").and.to.eql(\"Role name is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "829dfcc1-4d50-4092-870c-9f7b38a64e07",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/role/create"
									},
									"response": []
								},
								{
									"name": "Create Role - Expired Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "903d677f-3c20-4217-b38a-670e1326af99",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "47411b28-c3a4-41c8-89b2-f8c01f36fb16",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"NBA1\",\n    \"office_uuid\":\"{{office_uuid}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/role/create"
									},
									"response": []
								}
							],
							"id": "f8d7aa40-41c7-400a-abca-3741c1311d7a"
						},
						{
							"name": "Role - Get Roles",
							"item": [
								{
									"name": "Get Roles - Super Admin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10249eda-cef5-41b3-b1cb-37719b836075",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Roles data is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.roles).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"First role contains required fields\", function () {\r",
													"    pm.expect(jsonData.roles[0]).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.roles[0]._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.roles[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.roles[0].name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.roles[0].createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "af093feb-4d1f-4c1d-bcd0-69b474665ab0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/role/{{office_uuid}}"
									},
									"response": []
								},
								{
									"name": "Get Roles - Super Admin - Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10249eda-cef5-41b3-b1cb-37719b836075",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404); \r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Medcenter not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "74c620f1-13e8-491a-954f-2764f469c4aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/role/{{office_invalid}}"
									},
									"response": []
								},
								{
									"name": "Get Roles - Super Admin - Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10249eda-cef5-41b3-b1cb-37719b836075",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a8873a75-9935-4ca1-8ed4-c27401f867ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/role/{{office_uuid}}"
									},
									"response": []
								},
								{
									"name": "Get Roles - Super Admin - No Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10249eda-cef5-41b3-b1cb-37719b836075",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is returned\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b934e7b3-c7dc-456d-97ee-fa5f4b74c6ae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/role/{{office_uuid}}"
									},
									"response": []
								}
							],
							"id": "05ffcfab-c58d-424a-a68d-b35c987206ec"
						},
						{
							"name": "Role - Delete",
							"item": [
								{
									"name": "Delete Role by ID - successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf132d16-5be1-4a2b-8548-fb7dd08f5d17",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Role is deleted successfully\", function () {",
													"    pm.expect(jsonData.role.message).is.eql(\"Role deleted successfully\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "313ee6ee-8b92-4491-8c9e-6c29f3ddb1e0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{host}}api/role/{{role_id}}"
									},
									"response": []
								},
								{
									"name": "Delete Role by ID - invalid ID",
									"id": "11c647c9-ba28-4d8e-a767-a15919c0b449",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "{{host}}api/role/6734007c0a3af88d9db52525"
									},
									"response": []
								}
							],
							"id": "8910d18b-be96-40b6-a274-bca1656a6b62"
						}
					],
					"id": "54abeafb-3f15-47f4-a016-a5789f154588"
				},
				{
					"name": "Users (Patient)",
					"item": [
						{
							"name": "Users(Patient) - Register",
							"item": [
								{
									"name": "Register Patient - Super Admin - Self-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"patient registered successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "239ac6d6-9534-4264-87a4-0a4691c75bb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											},
											{
												"key": "Email",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-SuperAdmin-Sponsor-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"patient registered successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c2114688-6bc9-4e14-8c35-cec352f8f519",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											},
											{
												"key": "Emails",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Asknello\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-SuperAdmin-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "beac5329-3528-4823-90bc-e1fc5abe572b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"tolutst@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-SuperAdmin-EmailExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration failure message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.include(\"patient with email already exists\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e2a66351-9d11-4b0f-8993-bf8ac7517808",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c2900da0-7134-456a-941d-b0fde73c518c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-SuperAdmin-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e5de9e73-e1c1-4f7c-80be-3b3519fcd82d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-SuperAdmin-InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error array is present and not empty\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Email validation error exists\", function () {\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"email\");\r",
													"});\r",
													"\r",
													"pm.test(\"Email validation error message is correct\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.include(\"email must be a valid email\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f17b559c-77b0-4fa5-9296-67ba73f3348e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteestgmail\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-SuperAdmin-EmptyOffice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Office not found error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Office with the provided office_uuid and office not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "86efab84-1c3d-4d57-bcee-4c66b5de8762",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											},
											{
												"key": "Email",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mab\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{}}\",\n    \"office\":\"{{}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								}
							],
							"id": "08936a59-8caf-4042-b8d4-afd94b14d330",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98c7b16d-7cd2-41ca-889c-2e1254be5b07",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"var randomString = Math.random().toString(36).substring(7); \r",
											"var email = `user_${randomString}@example.com`;\r",
											"\r",
											"pm.environment.set(\"randomEmail\", email);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9bbb2ae-1a73-42a7-808e-c84891c9163b",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Users(Patient) - ALL",
							"item": [
								{
									"name": "Get All Patient- SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patients data is valid\", () => {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.patients).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"\r",
													"    pm.expect(jsonData.patients[0]._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1713cf95-b4b5-4b7d-81c5-4d10b914883d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								},
								{
									"name": "Get All Patient-SuperAdmin-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "91cbffef-71fb-4ef5-b47d-b498ffb9187a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								},
								{
									"name": "Get All Patient- SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "698d71e8-6f0c-41db-a91e-b5edbad7d2ce",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								}
							],
							"id": "316dd5e3-bc4e-48ef-af4c-667ed4da3652"
						},
						{
							"name": "Users(Patient)-Unique(upi)",
							"item": [
								{
									"name": "Get Unique Patient(upi)-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains valid patient fields\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.patient).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Patient details are correctly returned\", function () {\r",
													"    pm.expect(jsonData.patient._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8607787c-427e-4f78-94a8-881ae5da9773",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-SuperAdmin-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\").and.to.eql(\"Patient not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6bb94fc8-fd79-40d5-aec0-63b06efa2170",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D5"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-SuperAdmin-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "eae6d0d7-1af1-4420-96a4-4b9cbe334efe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6c899775-fec7-4a00-be2d-7e085172d2a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								}
							],
							"id": "75459a6a-321b-48d9-b48a-c4c0748f2118"
						},
						{
							"name": "Users(PatientSearch)",
							"item": [
								{
									"name": "Search Patient by lastname-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1551ff6-7ec2-42d6-9e2b-ffffc3085e51",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Users array is valid and contains at least one user\", function () {\r",
													"    pm.expect(jsonData.users).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"First user details are properly structured\", function () {\r",
													"    let user = jsonData.users[0];\r",
													"\r",
													"    pm.expect(user._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "04d367f4-26b7-4c38-a200-58c4621ae08e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient SuperAdmin-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cc8e1fe-7645-4f19-af43-43a6cff77c23",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3467bd4b-b1fb-4b58-b20f-0e48a9680e12",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by lastname-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57f4afee-4074-4ebb-a59c-fa11ab6f57cd",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "69358ea8-cdfe-4324-a5ef-018bbbfccbf9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by upi-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5ac424-0373-4c25-9059-92b765fdd1c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Users array is valid and contains at least one user\", function () {\r",
													"    pm.expect(jsonData.users).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"First user details are properly structured\", function () {\r",
													"    let user = jsonData.users[0];\r",
													"\r",
													"    pm.expect(user._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7ab74179-d424-46fc-92b2-2b94a68ed1ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=56C36693",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "56C36693"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by upi-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5ac424-0373-4c25-9059-92b765fdd1c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0a63ddd1-4d8a-4c83-aff6-c5888d5563b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=56C36693",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "56C36693"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by uuid-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee104cbf-dde7-4a27-85fb-f563bae52272",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"// pm.test(\"Users array exists and can be empty\", function () {\r",
													"//     pm.expect(jsonData.users).to.be.an(\"array\");\r",
													"//     pm.expect(jsonData.users.length).to.be.at.least(0);\r",
													"// });\r",
													"\r",
													"//Thi is commented out because the user field is not supposed to be zero and the script would be upadted. Currently only one uuid is live \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2a17010d-7e73-4b40-a345-9abf37713479",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query={{office_uuid}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "{{office_uuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by uuid-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee104cbf-dde7-4a27-85fb-f563bae52272",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1dfeb730-fc07-448d-81af-330ad84842c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query={{office_uuid}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "{{office_uuid}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "9422b152-df20-4353-914e-4f3405bcb2be"
						},
						{
							"name": "Users(Patient)-Update(upi)",
							"item": [
								{
									"name": "Update Patient (upi)-Update-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patient update was successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Patient updated successfully\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient data structure is valid\", function () {\r",
													"    var patient = jsonData.patient;\r",
													"\r",
													"    pm.expect(patient).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(patient._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.fullname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(patient.phone).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.isActive).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Allergies data structure is valid\", function () {\r",
													"    var allergies = jsonData.patient.allergies;\r",
													"\r",
													"    pm.expect(allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(allergies.drugs).to.be.an(\"array\");\r",
													"    pm.expect(allergies.food).to.be.an(\"array\");\r",
													"    pm.expect(allergies.other).to.be.an(\"array\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0adcf38f-64ba-406a-9e24-e4a257dcbd6d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-EmptyFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error list is not empty\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Validating required fields\", function () {\r",
													"    var requiredFields = [\r",
													"        \"title\", \"firstname\", \"lastname\", \"email\", \"phone\", \"gender\", \"dob\", \r",
													"        \"marital_status\", \"city\", \"state\", \"religion\", \"occupation\", \r",
													"        \"blood_group\", \"genotype\", \"next_of_kin_relationship\"\r",
													"    ];\r",
													"\r",
													"    requiredFields.forEach(field => {\r",
													"        pm.expect(jsonData.error.some(err => err.path === field)).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Each error object has required properties\", function () {\r",
													"    jsonData.error.forEach(error => {\r",
													"        pm.expect(error).to.have.property(\"msg\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"path\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"type\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "feb9fb0b-c31b-4951-973a-e9521021f789",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"\",\n        \"firstname\": \"\",\n        \"lastname\": \"\",\n        \"middlename\": \"\",\n        \"marital_status\": \"\",\n        \"email\": \"\",\n        \"phone\": \"\",\n        \"address\": \"\",\n        \"state\": \"\",\n        \"city\": \"\",\n        \"religion\": \"\",\n        \"blood_group\": \"\",\n        \"genotype\": \"\",\n        \"next_of_kin\": \"\",\n        \"next_of_kin_relationship\": \"\",\n        \"next_of_kin_phone\": \"\",\n        \"next_of_kin_address\": \"\",\n        \n        \"sponsor\": \"\",\n        \"sponsor_plan\": \"\", //fixed\n        \"occupation\": \"\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"\",\n        \"gender\": \"\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c1670148-efc4-4107-bedc-ae4001d10d17",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fa73078f-e292-49e3-82b5-3f403a109669",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								}
							],
							"id": "e29ba2e4-ed84-476f-915b-494b603d241f"
						},
						{
							"name": "Users(Patient)-DEL",
							"item": [
								{
									"name": "Delete Unique Patient",
									"id": "5e52d40d-9a77-457e-98e6-03f3491f945e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}/api/patient/unique/CEFD2ED6"
									},
									"response": []
								}
							],
							"id": "6166f18b-5477-40e9-9917-6e2c38366733"
						}
					],
					"id": "698aa168-d14d-49c5-9632-c0feed19a4dc"
				},
				{
					"name": "Users(Staff)",
					"item": [
						{
							"name": "Users(staff)-Password",
							"item": [
								{
									"name": "Change Password-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a168181b-bb0e-46db-ac85-81e55ebced9c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Password update success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Password updated successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "24f758d6-1e8d-46db-82c1-6c4b137afc94",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan@assurdly.com\",\n    \"password\":\"Password123@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/user/changepassword"
									},
									"response": []
								},
								{
									"name": "Change Password-UserNotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a168181b-bb0e-46db-ac85-81e55ebced9c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"User not found error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"user not found\");\r",
													"}); "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "34bbbf0a-ae5c-4dd7-8ff7-5da138a52c5b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"mor@assurdly.com\",\n    \"password\":\"Password123@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/user/changepassword"
									},
									"response": []
								},
								{
									"name": "Change Password-InvalidPassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a168181b-bb0e-46db-ac85-81e55ebced9c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Password validation errors are present\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Password validation rules are enforced\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.include(\"password must be at least 8 characters long\");\r",
													"    pm.expect(jsonData.error[1].msg).to.include(\"Password must contain at least one uppercase letter\");\r",
													"    pm.expect(jsonData.error[2].msg).to.include(\"Password must contain at least one number\");\r",
													"    pm.expect(jsonData.error[3].msg).to.include(\"Password must contain at least one special character\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1383d177-651b-4371-a8ce-1b9a036dd17d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan1@assurdly.com\",\n    \"password\":\"assword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/user/changepassword"
									},
									"response": []
								},
								{
									"name": "Change Password-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a168181b-bb0e-46db-ac85-81e55ebced9c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e14fb724-bc62-4d80-808c-f1a5e62ecd25",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan1@assurdly.com\",\n    \"password\":\"Password123@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/user/changepassword"
									},
									"response": []
								},
								{
									"name": "Change Password-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a168181b-bb0e-46db-ac85-81e55ebced9c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9fda1153-a20c-48a8-8d08-0d3e90a907d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan1@assurdly.com\",\n    \"password\":\"Password123@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/user/changepassword"
									},
									"response": []
								},
								{
									"name": "Change Password-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a168181b-bb0e-46db-ac85-81e55ebced9c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "747c3636-c464-46c3-9ee4-604280711304",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan1@assurdly.com\",\n    \"password\":\"Password123@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/user/changepassword"
									},
									"response": []
								},
								{
									"name": "Change Password-AccessDenied",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a168181b-bb0e-46db-ac85-81e55ebced9c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Access denied message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Admins only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User information is included\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\").and.to.not.be.null;;\r",
													"});\r",
													"\r",
													"pm.test(\"User role is unauthorized\", function () {\r",
													"    pm.expect([\"Receptionist\",\"Doctor\"]).to.include(jsonData.user.role);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2ef5f07b-1600-4235-a88d-e79ba1070a37",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan1@assurdly.com\",\n    \"password\":\"Password123@\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/user/changepassword"
									},
									"response": []
								}
							],
							"id": "f5c98beb-d1e6-472a-8ba9-d1673bac1b20"
						},
						{
							"name": "Users(Staff)-Clinical",
							"item": [
								{
									"name": "Get Clinical Staff-SuperAdmin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Clinical staff data is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.clinicalstaff).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Clinical staff member contains required fields\", function () {\r",
													"    pm.expect(jsonData.clinicalstaff[0]).to.be.an(\"object\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0]._id).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].firstname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].lastname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].email).to.be.a(\"string\").and.to.include(\"@\").and.to.include(\".\");\r",
													"    pm.expect(jsonData.clinicalstaff[0].phone).to.be.a(\"string\").and.to.not.include(\"number\");\r",
													"    pm.expect(jsonData.clinicalstaff[0].office).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].department).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].isActive).to.be.a(\"boolean\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].aos).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].dob).to.be.a(\"string\").and.to.have.lengthOf(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "137a8537-5694-412e-b01e-1564fb8815dc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								},
								{
									"name": "Get Clinical Staff-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "507741bd-53c7-49fa-b53b-700532843cd3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								},
								{
									"name": "Get Clinical Staff-SuperAdmin-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8241cab9-35a8-4fb4-b640-2b10206459a3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								},
								{
									"name": "Get Clinical Staff-SuperAdmin-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ced54b16-6394-4169-9333-54e355268cb5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								}
							],
							"id": "da0a8e2f-17ff-41e4-bb3d-7717f7056b84"
						},
						{
							"name": "Users(Staff)-NoneClinical",
							"item": [
								{
									"name": "Non Clinical Staff-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Non-clinical staff data is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.nonclinicalstaff).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Non-clinical staff member contains required fields\", function () {\r",
													"    pm.expect(jsonData.nonclinicalstaff[0]).to.be.an(\"object\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0]._id).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].firstname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].lastname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].email).to.be.a(\"string\").and.to.include(\"@\").and.to.include(\".\");\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].phone).to.be.a(\"string\").and.to.not.include(\"number\");\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].office).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].department).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].isActive).to.be.a(\"boolean\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].aos).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(Number(jsonData.nonclinicalstaff[0].fee)).to.be.a(\"number\").and.to.be.at.least(0);\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].dob).to.be.a(\"string\").and.to.have.lengthOf(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "733a0da1-a5d5-4a8c-8105-e36c0700fdaa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								},
								{
									"name": "Non Clinical Staff-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c781d618-bf61-4ad0-8931-7f86f3446dd3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								},
								{
									"name": "Non Clinical Staff-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1ddb42d4-6eaa-4cf6-bda2-76405c1b0542",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								},
								{
									"name": "Non Clinical Staff- NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "4a55d716-a06d-4fcc-89df-5dfee25d82e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								}
							],
							"id": "18f780b1-20a4-4939-b20d-aea93734414a"
						},
						{
							"name": "Users(Staff)-Unique-uuid",
							"item": [
								{
									"name": "Get Unique by uuid-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e5860a7-b335-48ad-9f16-4697fb540120",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"User data is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"User contains required fields\", function () {\r",
													"    pm.expect(jsonData.user._id).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.firstname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.lastname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\").and.to.include(\".\");\r",
													"    pm.expect(jsonData.user.phone).to.be.a(\"string\").and.to.not.include(\"number\");\r",
													"    pm.expect(jsonData.user.office).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.office_uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.department).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.isActive).to.be.a(\"boolean\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.dob).to.be.a(\"string\").and.to.have.lengthOf(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6d7c5535-3a9e-48c7-8347-ab6c9da0cc76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/unique/pqlwtg"
									},
									"response": []
								},
								{
									"name": "Get Unique by uuid-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e5860a7-b335-48ad-9f16-4697fb540120",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\").and.to.eql(\"User not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "df936102-79c7-4f99-8729-5c008e6f95e8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/unique/pq"
									},
									"response": []
								},
								{
									"name": "Get Unique by uuid-ExpireedToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e5860a7-b335-48ad-9f16-4697fb540120",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0deca2d2-0302-45f4-b22c-a3c6315f209e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/unique/pqlwtg"
									},
									"response": []
								},
								{
									"name": "Get Unique by uuid-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e5860a7-b335-48ad-9f16-4697fb540120",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9d17a5be-1ae1-484d-93e2-fc6c15e644c0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/user/unique/pqlwtg"
									},
									"response": []
								},
								{
									"name": "Get Unique by uuid-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e5860a7-b335-48ad-9f16-4697fb540120",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "406e177d-fd13-4fb7-9051-59c89fa7e431",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/unique/pqlwtg"
									},
									"response": []
								},
								{
									"name": "Get Unique by uuid-AccessDenied",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e5860a7-b335-48ad-9f16-4697fb540120",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Access denied message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Admins only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User information is included\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\").and.to.not.be.null;;\r",
													"});\r",
													"\r",
													"pm.test(\"User role is unauthorized\", function () {\r",
													"    pm.expect([\"Receptionist\",\"Doctor\"]).to.include(jsonData.user.role);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "cff89880-af2e-49ab-a0f2-c36499f1e840",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/unique/pqlwtg"
									},
									"response": []
								}
							],
							"id": "dcb8807a-5e3a-4f4c-9f87-d578a96d25ac"
						}
					],
					"id": "833c9e7e-3587-4e25-8b5e-e6a54878a849"
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "Appointment-Schedule",
							"item": [
								{
									"name": "Schedule-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment scheduling success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Appointment scheduled successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bd7f43c5-059d-4700-af4a-6a946e2a728c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 Am\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/schedule"
									},
									"response": []
								},
								{
									"name": "Schedule-SuperAdmin-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3b6f1902-c66c-488a-931a-dae692cf1619",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/schedule"
									},
									"response": []
								},
								{
									"name": "Schedule-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "88f3f4e7-16be-4c6d-913a-9f73dabb16c7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/schedule"
									},
									"response": []
								},
								{
									"name": "Schedule-SuperAdmin-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c0d71c8b-d198-4a17-8a59-63c72e336385",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/schedule"
									},
									"response": []
								},
								{
									"name": "Schedule-SuperAdmin-FieldsRequired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error response structure is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Required field errors are returned\", function () {\r",
													"    var errorMessages = jsonData.error.map(item => item.msg);\r",
													"    \r",
													"    pm.expect(errorMessages).to.include(\"Firstname is required\");\r",
													"    pm.expect(errorMessages).to.include(\"Last name is required\");\r",
													"    pm.expect(errorMessages).to.include(\"Email is required\");\r",
													"    pm.expect(errorMessages).to.include(\"upi is required\");\r",
													"    pm.expect(errorMessages).to.include(\"purpose is required\");\r",
													"    pm.expect(errorMessages).to.include(\"consultant is required\");\r",
													"    pm.expect(errorMessages).to.include(\"visit_type is required\");\r",
													"    pm.expect(errorMessages).to.include(\"visit_date is required\");\r",
													"    pm.expect(errorMessages).to.include(\"sponsor is required\");\r",
													"    pm.expect(errorMessages).to.include(\"sponsor_plan is required\");\r",
													"    pm.expect(errorMessages).to.include(\"scheduled_time is required\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "59f8b89a-2136-44eb-94d7-efd5469684e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n       \n        \"firstname\": \"\",\n        \"lastname\": \"\",\n        \"upi\": \"\",\n        \"email\": \"\",\n        \"purpose\":\"\",\n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"\",\n        \"visit_type\":\"\",\n        \"visit_date\":\"\",\n    \"scheduled_time\":\"\",\n    \"is_urgent\":false,\n        \"sponsor\": \"\",  // refer to sponsor folder \n        \"sponsor_plan\": \"\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/schedule"
									},
									"response": []
								}
							],
							"id": "9dd85dc0-4295-46e9-838d-0cada66b27db"
						},
						{
							"name": "Appointment-Get",
							"item": [
								{
									"name": "Get Appointments-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e82217f-6d25-4a63-9a99-7acab1bf0d5b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointments response structure is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.appointments).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment contains required fields\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment._id).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.firstname).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.lastname).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.upi).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(appointment.purpose).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
													"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.office).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.uuid).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.consultant).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.not.to.be.null;\r",
													"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Vital signs have expected values\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment.vital_height).to.be.a(\"number\").and.not.be.null.and.not.equal(0);\r",
													"    pm.expect(appointment.vital_weight).to.be.a(\"number\").and.not.be.null.and.not.equal(0);\r",
													"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\").and.not.be.null.and.not.equal(0);\r",
													"    pm.expect(appointment.vital_temperature).to.be.a(\"number\").and.not.be.null.and.not.equal(0);\r",
													"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\").and.not.be.null.and.not.equal(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d5ec1ac8-a5db-4889-b3a8-68fe08f73133",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								},
								{
									"name": "Get Appointments-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e82217f-6d25-4a63-9a99-7acab1bf0d5b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f50e92e0-f0e4-421c-9608-a2a52192e099",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								},
								{
									"name": "Get Appointments-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b4ad3b7-cb02-475e-b687-782b5150c46b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e1512fb1-fde5-4775-84c2-fe9d7e41a565",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								},
								{
									"name": "Get Appointments-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a8b4bdc-7672-4e94-9c19-fd15a7995f30",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "efb5aeb2-6006-4f62-b0bf-a7da5b74135b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								}
							],
							"id": "7df5bd64-cbbb-4bce-b581-9f5d72f14abd"
						},
						{
							"name": "Appointment-GetUnique",
							"item": [
								{
									"name": "Get Unique Appointment-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment retrieval is successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData).to.have.property(\"appointment\").that.is.an(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment contains required fields\", function () {\r",
													"    var appointment = jsonData.appointment;\r",
													"\r",
													"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
													"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Vital signs have expected numeric values\", function () {\r",
													"    var appointment = jsonData.appointment;\r",
													"\r",
													"    pm.expect(appointment.vital_height).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_weight).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_temperature).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\").and.to.be.above(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9bca4ae7-a64a-466c-a830-49e8a8faf8fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/ABE200E2"
									},
									"response": []
								},
								{
									"name": "Get Unique Appointment-SuperAdmin-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "edca1416-6f07-493a-8357-20859f50741e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/ABE200E2"
									},
									"response": []
								},
								{
									"name": "Get Unique Appointment-NoFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is failed\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"status\", \"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment not found message is correct\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Appointment not found\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3d439f38-f305-4fe7-9526-4823d7674655",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/0703CEB9"
									},
									"response": []
								},
								{
									"name": "Get Unique Appointment-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56b4f983-c344-4c9a-95b3-7878b86778a6",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f95620ff-0186-49f2-bcdd-766b71f531ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/0703CEB9"
									},
									"response": []
								}
							],
							"id": "ea844cde-ef95-4beb-b728-814858df7d43"
						},
						{
							"name": "Appointment-Patient upi",
							"item": [
								{
									"name": "Unique Patient Appointment (patient upi)-SuperAdmin-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ca305b9-c42c-4c16-a2db-75df88e2498e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointments retrieval is successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData).to.have.property(\"appointments\").that.is.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment contains required fields\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Vital signs have expected numeric values\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment.vital_height).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_weight).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_temperature).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\").and.to.be.above(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2dc1d838-7b1c-46fa-9973-39ff18b7748e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-SuperAdmin-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ca305b9-c42c-4c16-a2db-75df88e2498e",
												"exec": [
													"//This is supposed to give a 404 error, bug raised."
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0d76c82e-35c9-42eb-a2a7-5c464b57f725",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D5"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efbf57d0-30f3-4351-8c6d-4fe0a662cfc3",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e240a240-58a0-40b5-92f9-5e8a8e1b5b3b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2ca62e3-e3f6-4ac4-a23c-eb52e6acd2fb",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bad388f4-d826-41ca-a008-d611d427478b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "314a82d2-73af-4fc8-99a6-98118f1dba7e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b974d676-4b33-4c80-b75d-c51187177e3e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								}
							],
							"id": "82d28f05-89e7-43f9-8dbd-fe193de383b0"
						},
						{
							"name": "Appointment-Update",
							"item": [
								{
									"name": "Update Appointment (uuid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db5efbf0-a175-46a4-b01c-45cefc8e30e1",
												"exec": [
													"//No body to test for now "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bd25fe65-3cce-49a6-8b97-a6841f5fdc77",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/0703CEB9"
									},
									"response": []
								}
							],
							"id": "203b3a4e-86de-45f7-9224-4fdf9e79c17d"
						}
					],
					"id": "ebfffd03-d444-41c9-afff-90b5923c3e78"
				},
				{
					"name": "Drugs-FetchGenricDrugs",
					"item": [
						{
							"name": "Fetch generic Drugs-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"generic\").that.is.an(\"array\").and.to.have.length.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Generic drug entry has required fields\", function () {\r",
											"    var genericData = jsonData.generic[0];\r",
											"\r",
											"    pm.expect(genericData).to.be.an(\"object\");\r",
											"    pm.expect(genericData).to.have.property(\"_id\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(genericData).to.have.property(\"generic_id\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(genericData).to.have.property(\"generic\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    //pm.expect(genericData).to.have.property(\"createdAt\").that.is.a(\"string\");//.and.to.not.be.null;\r",
											"    //pm.expect(genericData).to.have.property(\"updatedAt\").that.is.a(\"string\");//.and.to.not.be.null;\r",
											"});\r",
											"\r",
											"//Note: This was commented out because the initial data did not ahve date, that was later updated, hence the system still retrives old data and this test script would automatically fail. This can be uncommented with all the response from the DB have date.\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "449ebb57-521a-450a-a181-9098bd719308",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic Drugs-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected field\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error meesage is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0d4d9f59-4dd6-4b0a-a4ac-4056cd1a4f98",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token_Invalid}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic Drugs-ExpiredToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a2aa0c84-c821-4de3-890f-7ea38af7c486",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic Drugs-NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization error message is correct\", () => {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5a4a2779-cfe5-4ad9-a7ad-f44431bfa54c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						}
					],
					"id": "bd5b3538-63c4-4af2-9ddd-cd144f625774"
				},
				{
					"name": "Sponsors",
					"item": [
						{
							"name": "CreateSponsor",
							"item": [
								{
									"name": "CreateSponsor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e59ff3c-f5e0-4ac5-b64e-0676f42bef87",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Sponsor Added successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f716a354-c114-4f61-8335-3ed27b24216f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bear {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARETTTT PRICELLIST\",\n    \"type\" : \"Internal Use\",\n \n    \"contact_email\":\"info@famacare.com\",\n    \"contact_person\":\"Mrs Uzor Ukonmah\"\n    \n\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/create"
									},
									"response": []
								},
								{
									"name": "CreateSponsor-OtherAuth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e59ff3c-f5e0-4ac5-b64e-0676f42bef87",
												"exec": [
													"//Only admin is supposed to call this endpoint\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "08abdfa3-77d9-4fb3-b3cc-1087e6e1ac67",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bear {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACAREEEE PRICELLIST\",\n    \"type\" : \"Internal Use\",\n \n    \"contact_email\":\"info@famacare.com\",\n    \"contact_person\":\"Mrs Uzor Ukonmah\"\n    \n\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/create"
									},
									"response": []
								},
								{
									"name": "CreateSponsor -SponsorExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e59ff3c-f5e0-4ac5-b64e-0676f42bef87",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor already exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "97868597-ccc6-48fd-a958-83bb5667b414",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bear {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE PRICELIST\",\n    \"type\" : \"Internal Use\",\n \n    \"contact_email\":\"info@famacare.com\",\n    \"contact_person\":\"Mrs Uzor Ukonmah\"\n    \n\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/create"
									},
									"response": []
								},
								{
									"name": "CreateSponsor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e59ff3c-f5e0-4ac5-b64e-0676f42bef87",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c5136c3f-dbfc-4052-9bd1-0d68d29f0781",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bear {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE PRICELIST\",\n    \"type\" : \"Internal Use\",\n \n    \"contact_email\":\"info@famacare.com\",\n    \"contact_person\":\"Mrs Uzor Ukonmah\"\n    \n\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/create"
									},
									"response": []
								},
								{
									"name": "CreateSponsor -ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e59ff3c-f5e0-4ac5-b64e-0676f42bef87",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2d49bc7f-cc1f-429d-91fd-5092ad45436a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bear {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE PRICELIIST\",\n    \"type\" : \"Internal Use\",\n \n    \"contact_email\":\"info@famacare.com\",\n    \"contact_person\":\"Mrs Uzor Ukonmah\"\n    \n\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/create"
									},
									"response": []
								},
								{
									"name": "CreateSponsor-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e59ff3c-f5e0-4ac5-b64e-0676f42bef87",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2f1e2b58-f48d-4d8a-b624-6d1bbe5920cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE PRICELIIST\",\n    \"type\" : \"Internal Use\",\n \n    \"contact_email\":\"info@famacare.com\",\n    \"contact_person\":\"Mrs Uzor Ukonmah\"\n    \n\n\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/create"
									},
									"response": []
								}
							],
							"id": "68b3cc41-43e2-4155-ab26-140361bcf058"
						},
						{
							"name": "FetchSponsor",
							"item": [
								{
									"name": "Fetch Sponsors-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "987750a2-f8e6-4967-ba38-1cea2ba6743f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.sponsors).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Sponsor details are valid\", function () {\r",
													"    var sponsor = jsonData.sponsors[0];\r",
													"\r",
													"    pm.expect(sponsor._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0bb1b929-0a34-4740-8fe3-a6540df55e28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-InValidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ae6a6766-c4a1-4945-9415-a5e1725e8b77",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b3ae6bef-2df3-4410-9025-250b53358a60",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b4e2c4bd-6a5f-45ab-9107-bdb98ae6ddf5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								}
							],
							"id": "7b2a1ced-c363-4c4c-a89f-4b17bc1d5636"
						},
						{
							"name": "Update-Unique-sponsor",
							"item": [
								{
									"name": "Update unique sponsor-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17e135b4-7594-451d-9a0a-4560fad82f1e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Sponsor Updated successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "72dc4542-b68c-4d9e-9ee8-95474d7df953",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "   {\n          \n            \"name\": \"Famacare Diagnosis\",\n            \"type\": \"Clinic\",\n            \"phone\": \"09070040301\",\n            \"contact_email\": \"Centre0@famacare.com\",\n            \"contact_person\": \"Judith Michael\"\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/edit/87EDF987"
									},
									"response": []
								},
								{
									"name": "Update unique sponsor-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17e135b4-7594-451d-9a0a-4560fad82f1e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Sponsor does not exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "49df52ec-4e1c-4fed-bf73-87185668da15",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "   {\n          \n            \"name\": \"Famacare Diagnosis\",\n            \"type\": \"Clinic\",\n            \"phone\": \"09070040301\",\n            \"contact_email\": \"Centre0@famacare.com\",\n            \"contact_person\": \"Judith Michael\"\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/edit/87"
									},
									"response": []
								},
								{
									"name": "Update unique sponsor-NotPermitted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17e135b4-7594-451d-9a0a-4560fad82f1e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Access denied message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Admins only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User information is included\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.role).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "83309b89-61f0-474c-be01-c6aac7450734",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "   {\n          \n            \"name\": \"Famacare Diagnosis\",\n            \"type\": \"Clinic\",\n            \"phone\": \"09070040301\",\n            \"contact_email\": \"Centre0@famacare.com\",\n            \"contact_person\": \"Judith Michael\"\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/edit/87EDF987"
									},
									"response": []
								},
								{
									"name": "UpdateUniqueSponsor-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17e135b4-7594-451d-9a0a-4560fad82f1e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "36a12cac-9606-4192-957a-07e457b3fb45",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "   {\n          \n            \"name\": \"Famacare Diagnosis\",\n            \"type\": \"Clinic\",\n            \"phone\": \"09070040301\",\n            \"contact_email\": \"Centre0@famacare.com\",\n            \"contact_person\": \"Judith Michael\"\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/edit/87EDF987"
									},
									"response": []
								},
								{
									"name": "UpdateUniqueSponsor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17e135b4-7594-451d-9a0a-4560fad82f1e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "029e3d36-9006-493f-9f95-0175675803b1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "   {\n          \n            \"name\": \"Famacare Diagnosis\",\n            \"type\": \"Clinic\",\n            \"phone\": \"09070040301\",\n            \"contact_email\": \"Centre0@famacare.com\",\n            \"contact_person\": \"Judith Michael\"\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/edit/87EDF987"
									},
									"response": []
								},
								{
									"name": "UpdateUniqueSponsor -FieldsRequired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17e135b4-7594-451d-9a0a-4560fad82f1e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error response contains required fields\", function () {\r",
													"    pm.expect(jsonData.errors).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Validating specific error messages\", function () {\r",
													"    var errorMessages = jsonData.errors.map(error => error.msg);\r",
													"\r",
													"    pm.expect(errorMessages).to.include(\"Name is required\");\r",
													"    pm.expect(errorMessages).to.include(\"Email is invalid\");\r",
													"    pm.expect(errorMessages).to.include(\"Phone number is invalid\");\r",
													"    pm.expect(errorMessages).to.include(\"Type is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b2b2daea-6291-4c70-8631-f3d9804fcb61",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "   {\n          \n            \"name\": \"\",\n            \"type\": \"\",\n            \"phone\": \"\",\n            \"contact_email\": \"\",\n            \"contact_person\": \"\"\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/edit/87EDF987"
									},
									"response": []
								}
							],
							"id": "348acbbc-c61a-48d0-8eac-454b22257a56"
						},
						{
							"name": "CreateSponsorPlan",
							"item": [
								{
									"name": "Create Sponsor Plan-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4d025fc-c2f2-48bf-bac6-288a96076b24",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Sponsor plan addition success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Sponsor Plan Added successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "cfcda4f0-56aa-4c28-902f-59f83e74c06c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE EE1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/plan/D773AAFB"
									},
									"response": []
								},
								{
									"name": "Create Sponsor-AlreadyExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "913f2714-6675-4de0-9b68-66789a9a0ccc",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message for existing sponsor plan is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan already exists\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b0ca54e9-fbb3-4a59-873e-670c51e3541c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE PRICELIST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/plan/D773AAFB"
									},
									"response": []
								},
								{
									"name": "Create Sponsor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "913f2714-6675-4de0-9b68-66789a9a0ccc",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "60922a94-2466-4464-97eb-5723f708462a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE PRICELIST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/plan/D773AAFB"
									},
									"response": []
								},
								{
									"name": "Create Sponsor-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "913f2714-6675-4de0-9b68-66789a9a0ccc",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ad540be2-4e1b-4198-bf3a-c3a646fb06bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"FAMACARE PRICELIST\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/plan/D773AAFB"
									},
									"response": []
								},
								{
									"name": "Create Sponsor-NameRequired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "913f2714-6675-4de0-9b68-66789a9a0ccc",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Department validation failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"    pm.expect(jsonData.error[0].msg).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.error[1].msg).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"//Bug"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "744b2073-5356-4ec1-9278-0036813cdac5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/sponsor/plan/D773AAFB"
									},
									"response": []
								}
							],
							"id": "0b445697-266a-4fbc-8769-a692b12bc009"
						},
						{
							"name": "Sponsor-DEL",
							"item": [
								{
									"name": "Delete Sponsor",
									"id": "75d4ce12-b698-4642-b2ee-4574c01071bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": "{{host}}/api/sponsor/delete/FE78F283"
									},
									"response": []
								}
							],
							"id": "5e56c2d7-a6b9-4f54-a6cf-4e9e160f286b"
						},
						{
							"name": "Sponsor-GetAll",
							"item": [
								{
									"name": "All Sponsor Plans-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4e73471-018a-4c04-abcd-e054d7b61677",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains sponsor plans\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.plans).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Plan details are valid\", function () {\r",
													"    var plan = jsonData.plans[0];\r",
													"    \r",
													"    pm.expect(plan._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"    pm.expect(plan.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "99da9756-5616-473e-be8f-7100c5fe6546",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								},
								{
									"name": "All Sponsor Plans-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75d5cc47-f7f7-4acc-afbd-c640368f15fb",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a66a0ee4-a7b6-492c-9e73-afc3853f9992",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								},
								{
									"name": "All Sponsor Plans-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a250bfe-8058-4e0e-ba3c-55236b7e1de7",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9684b433-c3e0-4ee0-a3e7-6e91d5d28803",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								}
							],
							"id": "5bb7c8dd-b7a9-4b45-bc2a-81c5c62b8e9f"
						},
						{
							"name": "Fetch Unique Sponsor (uuid)",
							"item": [
								{
									"name": "Fetch Unique Sponsor (uuid)-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff9ddcd-d2e9-4277-a456-1f4760a474c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Sponsor data is valid\", function () {\r",
													"    pm.expect(jsonData.sponsor).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.phone).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.contact_email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.sponsor.contact_person).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(jsonData.sponsor.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a98bb4d7-b318-44fb-bd93-d9492cbcba9b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff9ddcd-d2e9-4277-a456-1f4760a474c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Sponsor does not exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "94c1e9ef-f921-4c32-9178-e5f0ed2a6178",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87E"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c47921f-f3b6-4f54-8d74-68015e6e8e58",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "05cc5b0d-8858-4d96-ab8f-d241eb322180",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bfe42b5-41a3-4faa-a0ff-acf4d585acc1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "518a81f5-342c-4524-a5f9-e43a75353b04",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								}
							],
							"id": "4581ab72-2318-48a6-9bdd-faee133a6142"
						},
						{
							"name": "Get Unique Plan by Name",
							"item": [
								{
									"name": "Get Unique Plan by Name-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.plan).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Plan details are valid\", function () {\r",
													"    var plan = jsonData.plan;\r",
													"\r",
													"    pm.expect(plan._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"    pm.expect(plan.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1fe783e8-f8bf-4bbb-84a2-4e7e1e8c1e15",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name- NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Sponsor Plan does not exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8018aff7-5c8a-4463-969d-1664e4138c89",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAM"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f32aee1f-1e54-4177-bdd7-77b09cb66a53",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "768108e9-a25b-4843-aeae-298528c3a95c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9a83e97e-6631-48e3-bf21-1aaa968b1ff6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								}
							],
							"id": "1b5c35b1-5465-4311-82aa-90d70a8b11a2"
						}
					],
					"id": "35d5f5f6-e2d9-4370-8de5-d676f13de89a"
				},
				{
					"name": "Services",
					"item": [
						{
							"name": "Service-Create",
							"item": [
								{
									"name": "Create-Service-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Service Added successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "833b2dee-b9a6-453c-b672-55ce928a1b8a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanuu Investigations\",\n    \"name\":\"Cry3\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "99c48c2f-a5b3-4f23-bc9c-447349486390",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry3\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b9e84f40-9e27-49b5-b7e4-ed267edca4ff",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e95c13a3-3260-48bd-90f5-39b5bf05bc98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-InvalidPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains validation errors\", function () {\r",
													"    pm.expect(jsonData.errors).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message for price field is correct\", function () {\r",
													"    pm.expect(jsonData.errors[0]).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.errors[0].path).to.eql(\"price\");\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Price must be a number\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "31118490-0942-4327-b129-aeac63d9e2ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":\"wqwqq\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-SponsorNotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5cb56f3c-d47e-4119-a5bc-67656c84e3ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-AlreadyExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd60acee-857a-42d0-9ebe-485ffcf2b289",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Service Already Exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "983cd286-4a6f-4b54-b5f6-a6ce3dec36d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Pathology Investigations\",\n    \"name\":\"Urea\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								}
							],
							"id": "eac6479d-5b0b-4013-97dc-de8ce032556b"
						},
						{
							"name": "fetch all services",
							"item": [
								{
									"name": "fetch all services-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains services\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.services).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Service details are valid\", function () {\r",
													"    var service = jsonData.services[0];\r",
													"\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"   // pm.expect(service.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    //pm.expect(service.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bc70b18a-af5e-4405-a9d9-9a06db39fd32",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "98075e01-681e-4c01-b042-765065730665",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "02855ea9-accd-43fc-b798-802cd91cbff8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a772935d-5c3e-40fe-8f62-ea4ea448451e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								}
							],
							"id": "0ac68070-ed98-401f-87bf-83d453eae9a0"
						},
						{
							"name": "fetch all services by type",
							"item": [
								{
									"name": "Fetch Service by type-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains services\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.services).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Service details are valid\", function () {\r",
													"    var service = jsonData.services[0];\r",
													"\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"   // pm.expect(service.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    //pm.expect(service.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "75ac88fe-331d-45fd-a7a7-67e2e4ecedcc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2d3f94a2-6ff5-46c2-8c1d-8067694f5442",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "cfd5ba94-7ae7-477d-8b2a-3cf002c5171d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "db61a106-4341-4c93-9d57-fe7efb42a429",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-InvalidServiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"type must be Pathology Investigations, Imaging Investigation or Service\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f71aa36b-aa64-4057-b9df-fc7cc343c654",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imcccc"
									},
									"response": []
								}
							],
							"id": "fe5d6dec-dc1b-48a6-95e4-b18c5fb75ae5"
						},
						{
							"name": "Investigation by plan_code",
							"item": [
								{
									"name": "Get Investigation by plan_code-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains investigations\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.investigations).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Investigation details are valid\", function () {\r",
													"    var investigation = jsonData.investigations[0];\r",
													"\r",
													"    pm.expect(investigation).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(investigation._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.price).to.be.a(\"number\").and.to.be.above(0).and.to.not.be.null;\r",
													"    pm.expect(investigation.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "18af8dbd-d5ca-4188-8dd4-224d3a3a5b21",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5a0cce6e-2ae8-499b-9786-bed1c2135eec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-ExpireToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a1a19362-70b0-4cf8-99f8-74dc6e110218",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "326f4f9b-6e56-480f-b30e-4b515c93bfd3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not  exist\");\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3cea2b55-adf5-45c3-b95d-d2237d99b90d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9"
									},
									"response": []
								}
							],
							"id": "1bfe0516-f190-4c21-b76e-84d8652da7d4"
						},
						{
							"name": "Imaging by plan_code",
							"item": [
								{
									"name": "Get Imaging by plan_code-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains imaging data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.imaging).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Imaging details are valid\", function () {\r",
													"    var imaging = jsonData.imaging[0];\r",
													"\r",
													"    pm.expect(imaging.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(imaging._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.price).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(imaging.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f0c50e69-1f1a-4004-9f9d-71aa27c5d37a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "4e93501e-c1fa-4c0a-a8ce-223f3ad44518",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b406693f-7bf2-4498-b1cd-2d8dabdf1ee9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code -InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8786122f-2099-4ec4-b395-32cfa426541f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exist\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0bee9ee1-1509-4c0b-9258-20a095dc41f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3333"
									},
									"response": []
								}
							],
							"id": "023133f9-5b7e-4a07-946f-2ad59725c05b"
						},
						{
							"name": "Otherservice by plan_code",
							"item": [
								{
									"name": "Get otherservice by plan_code-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains other service data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.otherservice).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Other service details are valid\", function () {\r",
													"    var service = jsonData.otherservice[0];\r",
													"\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "52c727fd-e7ef-462c-8690-eb93285543ad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-NoCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3849ce88-e2de-41dc-99ef-8a9ecdc47220",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-ExpiredCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7e5f094d-13d3-448e-9ec8-9bfe097c2df7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3c829e96-a12a-48c6-960b-6f77401e0305",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code_InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exist\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f94030fe-df26-47fd-9a94-1c6b1dd887d5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C766"
									},
									"response": []
								}
							],
							"id": "dfae96ad-c0ba-4fb1-bad2-c46a5eb9c856"
						}
					],
					"id": "90fbdd15-1aea-464d-9511-88da4a8005bd"
				}
			],
			"id": "2a0d46c8-f65e-465a-a24a-4f48efce2b08"
		},
		{
			"name": "DOCTOR",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Authntication-Login(ClinicalStaff)",
							"item": [
								{
									"name": "Login(staff) - Doctor-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb90aa48-33a0-4bba-a49d-3cf8680bbe55",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status is success and response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"User details and token exist\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.token).to.be.a(\"string\").and.to.have.length.above(10);\r",
													"    pm.expect(jsonData.user._id).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.user.isActive).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "346e046b-6bee-4989-879f-dc882d6f2300",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff)- Doctor-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Failure message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid email or password\");\r",
													"});\r",
													"\r",
													"//This would fail because the code did not cater for user not found, bug raised."
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ac152e84-3094-43fc-9a61-b3345ca43117",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukddddddemeka@fam.com\",\n    \"password\":\"Famacare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff)- Doctor- InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Failure message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid email or password\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1cafeefe-47c6-4585-aa75-160abcca46ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukemeka@fam.com\",\n    \"password\":\"Famacare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff)- Doctor- InvalidPassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Failure message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid email or password\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "669b37d0-c83f-4fe8-b7f7-7aadb7ba62ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukemeka@famacare.com\",\n    \"password\":\"Facare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								}
							],
							"id": "f08c65b8-f174-4390-8180-49075f47584c"
						},
						{
							"name": "Authentication-ForgotPassword",
							"item": [
								{
									"name": "Forgot- Successful-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Success object is present\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.resetToken).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Successful reset message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"Password reset email sent\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6cc970e8-77a9-416e-806b-c60f604dbc0e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								},
								{
									"name": "Forgot Password - Missing Email Field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Required email error message is returned\", function () {\r",
													"    pm.expect(jsonData.error[1].msg).to.eql(\"Email is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8d761897-84e9-4d3c-9c75-2714112844f0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								},
								{
									"name": "Forgot- InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct error message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Email not registered\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ba3c517a-3539-4e26-97b1-ed387c232856",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morg+1@assurdly.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								}
							],
							"id": "0f784314-a978-4f68-81cb-3b3b2b13ff68"
						},
						{
							"name": "Authentication-VerifyToken",
							"item": [
								{
									"name": "Verify Token-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation is successful\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.true;\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.be.below(jsonData.user.exp);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "095f7774-0737-43bc-8148-4fbb1c5738cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfRMqCtkw\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								},
								{
									"name": "Verify Token- EmptyToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains an error array\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Error path is token\", function () {\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"token\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should specify that token is required\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"Token is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "980f7fce-697b-4689-82ba-d5845b9cc169",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								},
								{
									"name": "Verify Token-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation status is false\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.false;\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation error is returned\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid or expired token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9a75dcca-4e7b-4bc2-a90b-98aa611b2d6f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								}
							],
							"id": "01ebdf9a-4492-4b33-a0b4-af8210a55941"
						},
						{
							"name": "Authentication-ResetPassword",
							"item": [
								{
									"name": "Reset Password - Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Password update was successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.message).to.include(\"Password updated successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "11a230d0-37cc-49bf-ae4d-29943052e13f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfRMqCtkw\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password - Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Required token error message is returned\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"Token is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f406a3da-bb5a-4ca3-ad18-77e1bbe27587",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"mor+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation failed\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.false;\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid or expired token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c56dd723-5dcd-4f2e-90d2-5821efa0d136",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfR\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password-InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"User registration error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"user with email not registered\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "15edbe3c-ab5d-435d-a5c8-c6b15d91c7b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"mor+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfRMqCtkw\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								}
							],
							"id": "346d9825-9521-4a8e-8f8e-4b3c39139de4"
						}
					],
					"id": "16290b79-9888-484c-ba92-f515d2ed88fd"
				},
				{
					"name": "Users(Patient)",
					"item": [
						{
							"name": "Users(Patient)-Register",
							"item": [
								{
									"name": "Register Patient-Doctor-Self-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"patient registered successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2a188b9f-daf5-4fd6-8c60-50a12be44b91",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											},
											{
												"key": "Email",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Doctor-Sponsor-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"patient registered successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f04abe83-e0a4-4289-a0a2-c393c313690c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											},
											{
												"key": "Email",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Asknello\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Doctor-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ee34dc68-4d03-46bc-9b90-9e0fd643ea88",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"tolutst@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Doctor-EmailExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration failure message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.include(\"patient with email already exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b8135dbb-eef4-436b-b221-f4c15593cdb0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c1cd4b3b-bbc9-4748-bb2b-ec16f6d3a323",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Doctor-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7c44414c-c61c-4107-bf56-017532e8b4f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Doctor-InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Email validation error exists\", () => {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"    pm.expect(jsonData.error[0].msg).to.include(\"email must be a valid email\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5e7ff932-9da9-4115-a33d-5b9fe563daa7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Doctor-EmptyOffice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"//user can create patient without an office"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0f09588f-1f96-49a0-a304-b0550c2dca86",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mab\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"tolutett@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_\",\n    \"office\":\"{{offi\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								}
							],
							"id": "498f0116-8a54-4661-93b8-e3276349e210",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "869ad3ba-55b3-470c-a47a-2c7d297fa3e2",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"var randomString = Math.random().toString(36).substring(7); \r",
											"var email = `user_${randomString}@example.com`;\r",
											"\r",
											"pm.environment.set(\"randomEmail\", email);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd06c282-8691-4491-b149-9f27ae7e93f7",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Users(Patient) - ALL",
							"item": [
								{
									"name": "Get All Patient- Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patients data is valid\", () => {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.patients).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"\r",
													"    pm.expect(jsonData.patients[0]._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d7dc376e-7c37-4068-921a-778d341d7650",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								},
								{
									"name": "Get All Patient-Doctor-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9f853407-f9fa-42c3-aff6-a80c9cd03a5f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								},
								{
									"name": "Get All Patient- Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fd147cd3-6a76-424b-ba35-4c3bc19e3d72",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								}
							],
							"id": "7f7f77bc-2ede-494b-93ba-4bd0e4a92ea8"
						},
						{
							"name": "Users(Patient)-Unique(upi)",
							"item": [
								{
									"name": "Get Unique Patient(upi)-Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains valid patient fields\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.patient).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Patient details are correctly returned\", function () {\r",
													"    pm.expect(jsonData.patient._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9ec0278b-8558-439f-aa18-50ec672ca3ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-Doctor-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\").and.to.eql(\"Patient not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e65473ed-64f0-474a-9cc7-5dd12bafad94",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D5"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-Doctor-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "49f4735e-5b0a-4b04-b0d4-fe070c14e856",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d15f06b3-0573-49bb-bd17-2881314603ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								}
							],
							"id": "9da34215-3f6f-4a33-a206-1379348f509d"
						},
						{
							"name": "Users(PatientSearch)",
							"item": [
								{
									"name": "Search Patient by lastname-Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1551ff6-7ec2-42d6-9e2b-ffffc3085e51",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Users array is valid and contains at least one user\", function () {\r",
													"    pm.expect(jsonData.users).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"First user details are properly structured\", function () {\r",
													"    let user = jsonData.users[0];\r",
													"\r",
													"    pm.expect(user._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2af06494-ed9c-4bef-b2eb-8aa2d97d68f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient Doctor-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cc8e1fe-7645-4f19-af43-43a6cff77c23",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5384897c-6986-4720-830b-b9499cfbe021",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by lastname-Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57f4afee-4074-4ebb-a59c-fa11ab6f57cd",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2ea3f5da-086c-4ca4-8bec-d5a6a59906a9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by upi-Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5ac424-0373-4c25-9059-92b765fdd1c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Users array is valid and contains at least one user\", function () {\r",
													"    pm.expect(jsonData.users).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"First user details are properly structured\", function () {\r",
													"    let user = jsonData.users[0];\r",
													"\r",
													"    pm.expect(user._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b4b7caa6-0853-49d3-8de8-d8586cb88baf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=56C36693",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "56C36693"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by upi-Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5ac424-0373-4c25-9059-92b765fdd1c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9a43cb59-c519-4ba9-abd7-1c52f46d4818",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=56C36693",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "56C36693"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by uuid-Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee104cbf-dde7-4a27-85fb-f563bae52272",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"// pm.test(\"Users array exists and can be empty\", function () {\r",
													"//     pm.expect(jsonData.users).to.be.an(\"array\");\r",
													"//     pm.expect(jsonData.users.length).to.be.at.least(0);\r",
													"// });\r",
													"\r",
													"//Thi is commented out because the user field is not supposed to be zero and the script would be upadted. Currently only one uuid is live \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "756eed14-42b7-4dc4-b96f-80223c8e2fcf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query={{office_uuid}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "{{office_uuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by uuid-Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee104cbf-dde7-4a27-85fb-f563bae52272",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d8e4ed55-c755-4e68-a906-881bf8b885ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query={{office_uuid}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "{{office_uuid}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "3fa06f5e-8fd4-4988-b3aa-47c861525b8f"
						},
						{
							"name": "Users(Patient)-Update(upi)",
							"item": [
								{
									"name": "Update Patient (upi)-Update",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patient update was successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Patient updated successfully\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient data structure is valid\", function () {\r",
													"    var patient = jsonData.patient;\r",
													"\r",
													"    pm.expect(patient).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(patient._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.fullname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(patient.phone).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.isActive).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Allergies data structure is valid\", function () {\r",
													"    var allergies = jsonData.patient.allergies;\r",
													"\r",
													"    pm.expect(allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(allergies.drugs).to.be.an(\"array\");\r",
													"    pm.expect(allergies.food).to.be.an(\"array\");\r",
													"    pm.expect(allergies.other).to.be.an(\"array\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "47e455f4-4ce4-4015-a247-7b009cad64b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-EmptyFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error list is not empty\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Validating required fields\", function () {\r",
													"    var requiredFields = [\r",
													"        \"title\", \"firstname\", \"lastname\", \"email\", \"phone\", \"gender\", \"dob\", \r",
													"        \"marital_status\", \"city\", \"state\", \"religion\", \"occupation\", \r",
													"        \"blood_group\", \"genotype\", \"next_of_kin_relationship\"\r",
													"    ];\r",
													"\r",
													"    requiredFields.forEach(field => {\r",
													"        pm.expect(jsonData.error.some(err => err.path === field)).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Each error object has required properties\", function () {\r",
													"    jsonData.error.forEach(error => {\r",
													"        pm.expect(error).to.have.property(\"msg\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"path\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"type\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "982ea935-1e3d-484a-989e-621aeff72ee9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"\",\n        \"firstname\": \"\",\n        \"lastname\": \"\",\n        \"middlename\": \"\",\n        \"marital_status\": \"\",\n        \"email\": \"\",\n        \"phone\": \"\",\n        \"address\": \"\",\n        \"state\": \"\",\n        \"city\": \"\",\n        \"religion\": \"\",\n        \"blood_group\": \"\",\n        \"genotype\": \"\",\n        \"next_of_kin\": \"\",\n        \"next_of_kin_relationship\": \"\",\n        \"next_of_kin_phone\": \"\",\n        \"next_of_kin_address\": \"\",\n        \n        \"sponsor\": \"\",\n        \"sponsor_plan\": \"\", //fixed\n        \"occupation\": \"\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"\",\n        \"gender\": \"\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1c524259-3f84-4eda-b7ac-4f6c8b9700f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b08eedff-2f7b-47a4-931f-5ac82ab96aa8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								}
							],
							"id": "2eb4b2ed-cf69-4671-b3e9-399448a5e02c"
						},
						{
							"name": "Users(Patient)-DEL",
							"item": [
								{
									"name": "Delete Unique Patient",
									"id": "1563a45b-138e-4f08-9863-a430b9f56309",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}/api/patient/unique/CEFD2ED6"
									},
									"response": []
								}
							],
							"id": "1e395aab-f16e-4139-8e9f-e117bc6041bb"
						}
					],
					"id": "041c48b1-6029-42c1-b892-d5de4cdd58c0"
				},
				{
					"name": "Diagnosis",
					"item": [
						{
							"name": "Diagnosis-Create",
							"item": [
								{
									"name": "DiagnosisCreate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63717d7f-34cf-420b-a122-d5e75046d7c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Success message is correct\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"status\", \"success\");\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Diagnosis Added successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9516c599-305a-4c4b-bbc9-3e75610c0d39",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"NqM001.1\",\n    \"name\":\"Fever and cold\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/diagnosis/create"
									},
									"response": []
								},
								{
									"name": "DiagnosisCreate-Others",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63717d7f-34cf-420b-a122-d5e75046d7c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Doctors only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User details are present\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.role).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e201e840-6009-456d-b507-502ec909d64e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"NM00.1\",\n    \"name\":\"Fever and cold\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/diagnosis/create"
									},
									"response": []
								},
								{
									"name": "Create-AlreadyExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90054cc0-3fc1-4e70-ad8e-e3731cbb482e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains expected fields\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
													"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response content is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Diagnosis already exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "024db424-b665-433b-9abd-4c6f2b548760",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"A00.0\",\n    \"name\":\"Cholera due to Vibrio cholerae 01, biovar cholerae\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/diagnosis/create"
									},
									"response": []
								},
								{
									"name": "Create-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90054cc0-3fc1-4e70-ad8e-e3731cbb482e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b5462323-58bc-4d39-8730-b01d91dd2550",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"A00.0\",\n    \"name\":\"Cholera due to Vibrio cholerae 01, biovar cholerae\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/diagnosis/create"
									},
									"response": []
								},
								{
									"name": "Create-FieldsRequired",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5525b37-33a6-4f93-a717-d692391fd032",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains expected fields\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
													"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response content is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Code and name are required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "09eda2c5-ef6b-4d5f-9ef3-8d7f0a218611",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"\",\n    \"name\":\"Cholera due to Vibrio cholerae 01, biovar cholerae\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/diagnosis/create"
									},
									"response": []
								},
								{
									"name": "Create-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd9fc890-5d39-49bc-9f99-ce21402f0a45",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1e547263-72f2-49ba-a33d-78620cbcdd93",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"A00.011\",\n    \"name\":\"Cholera due to Vibrio cholerae 01, biovar cholerae\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/diagnosis/create"
									},
									"response": []
								},
								{
									"name": "Create-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd9fc890-5d39-49bc-9f99-ce21402f0a45",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains expected field\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response content is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f5c455e0-383f-4a16-b66c-67d3772ea1c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"A00.011\",\n    \"name\":\"Cholera due to Vibrio cholerae 01, biovar cholerae\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/diagnosis/create"
									},
									"response": []
								}
							],
							"id": "76d36e5e-a1f8-47c4-b911-c4e389f19bd9"
						},
						{
							"name": "FetchAll",
							"item": [
								{
									"name": "fetch-all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3122cd5d-f42c-4c88-a966-20ed169fd8f2",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains expected fields\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
													"    pm.expect(jsonData).to.have.property(\"diagnosis\").that.is.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Response content is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Diagnosis contains required fields\", function () {\r",
													"    var diagnosis = jsonData.diagnosis[0];\r",
													"    pm.expect(diagnosis).to.have.property(\"_id\").that.is.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(diagnosis).to.have.property(\"code\").that.is.a(\"string\").and.to.not.be.empty;\r",
													"    pm.expect(diagnosis).to.have.property(\"name\").that.is.a(\"string\").and.to.not.be.empty;\r",
													"    //pm.expect(diagnosis).to.have.property(\"createdAt\").that.is.a(\"string\"); //.and.to.not.be.empty was not added here because the initial implementation did not have this field, but the update once have. So the system would pull old diagnosis and fail this and the one below.\r",
													"    //pm.expect(diagnosis).to.have.property(\"updatedAt\").that.is.a(\"string\")\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bdbba61a-27b5-45a2-8d66-4da163b2efbc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/diagnosis/fetch"
									},
									"response": []
								},
								{
									"name": "fetch-all-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3122cd5d-f42c-4c88-a966-20ed169fd8f2",
												"exec": [
													"// var jsonData = pm.response.json();\r",
													"\r",
													"// pm.test(\"Response has status code 401\", function () {\r",
													"//     pm.response.to.have.status(401);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Response contains expected field\", function () {\r",
													"//     pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
													"// });\r",
													"\r",
													"// pm.test(\"Response content is correct\", function () {\r",
													"//     pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"// });\r",
													"\r",
													"//This is commented because the endpoint retrieves informaation with out auth"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1cd67e1d-d6c5-4068-9c4b-c42b21a9966e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/diagnosis/fetch"
									},
									"response": []
								},
								{
									"name": "fetch-all-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3122cd5d-f42c-4c88-a966-20ed169fd8f2",
												"exec": [
													"// var jsonData = pm.response.json();\r",
													"\r",
													"// pm.test(\"Response status code is 401\", function () {\r",
													"//     pm.response.to.have.status(401);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Token expiration message is correct\", function () {\r",
													"//     pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"// });\r",
													"// // \r",
													"\r",
													"//This is commented because the endpoint retrieves informaation with out auth"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7f315a3d-d2db-424b-b701-2302469fe554",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/diagnosis/fetch"
									},
									"response": []
								}
							],
							"id": "903146ce-44e4-4961-a5d3-287e82d951c6"
						}
					],
					"id": "043411fe-dc45-464c-9ad6-9e4e86f5a0a0"
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "Schedule Appointment",
							"item": [
								{
									"name": "Schedule-Doctor-NotPermitted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Access denied message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Access denied: Admins and Receptionist only\");\r",
													"});\r",
													"\r",
													"pm.test(\"User information is included\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.role).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.user.exp).to.be.a(\"number\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2f3eb874-aed5-48e1-88d1-cb82123ee41b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/schedule"
									},
									"response": []
								}
							],
							"id": "a1d8c75b-edb7-4c2f-a37b-b6b5df16cc69"
						},
						{
							"name": "Appointment-Get",
							"item": [
								{
									"name": "Get Appointments-Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e82217f-6d25-4a63-9a99-7acab1bf0d5b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointments response structure is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.appointments).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment contains required fields\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
													"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Vital signs have expected values\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment.vital_height).to.be.a(\"number\");\r",
													"    pm.expect(appointment.vital_weight).to.be.a(\"number\");\r",
													"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\");\r",
													"    pm.expect(appointment.vital_temperature).to.be.a(\"number\");\r",
													"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d6ef50dd-907f-4631-ac50-981c5b26e1bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								},
								{
									"name": "Get Appointments-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e82217f-6d25-4a63-9a99-7acab1bf0d5b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1418a970-99d7-4e7c-816b-ba2f8fca49b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								},
								{
									"name": "Get Appointments-Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b4ad3b7-cb02-475e-b687-782b5150c46b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3e24e644-3ad7-430c-a7eb-dbfb72e91bbc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								},
								{
									"name": "Get Appointments-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a8b4bdc-7672-4e94-9c19-fd15a7995f30",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ab1fe9a0-2682-41dd-8301-5eef247aec22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/all"
									},
									"response": []
								}
							],
							"id": "7b00476f-c314-4bc0-a8a8-c9f6dae7b067"
						},
						{
							"name": "Appointment-GetUnique",
							"item": [
								{
									"name": "Get Unique Appointment-Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment retrieval is successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData).to.have.property(\"appointment\").that.is.an(\"object\");\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment contains required fields\", function () {\r",
													"    var appointment = jsonData.appointment;\r",
													"\r",
													"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
													"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Vital signs have expected numeric values\", function () {\r",
													"    var appointment = jsonData.appointment;\r",
													"\r",
													"    pm.expect(appointment.vital_height).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_weight).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_temperature).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\").and.to.be.above(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "43063835-9ced-4507-88ad-218002d28aed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/ABE200E2"
									},
									"response": []
								},
								{
									"name": "Get Unique Appointment-Doctor-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5a54a2f5-e611-4ba2-9e87-a71aeefb6e53",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/ABE200E2"
									},
									"response": []
								},
								{
									"name": "Get Unique Appointment-NoFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Status is failed\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"status\", \"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment not found message is correct\", function () {\r",
													"    pm.expect(jsonData).to.have.property(\"message\", \"Appointment not found\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9445e2d9-79dd-4eef-8ef0-0353a0511293",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/appointment/unique/0703CEB9"
									},
									"response": []
								},
								{
									"name": "Get Unique Appointment-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56b4f983-c344-4c9a-95b3-7878b86778a6",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3e8e0c03-f412-484b-b7ed-fd8f4f252fc4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}api/appointment/unique/0703CEB9?Authorization =Bearer {{ExpiredToken}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"appointment",
												"unique",
												"0703CEB9"
											],
											"query": [
												{
													"key": "Authorization ",
													"value": "Bearer {{ExpiredToken}}",
													"type": "text"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "fcd05d32-af69-4ab0-ba1d-f2f40f995cf1"
						},
						{
							"name": "Appointment-Patient upi",
							"item": [
								{
									"name": "Unique Patient Appointment (patient upi)-Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ca305b9-c42c-4c16-a2db-75df88e2498e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointments retrieval is successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData).to.have.property(\"appointments\").that.is.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Appointment contains required fields\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
													"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Vital signs have expected numeric values\", function () {\r",
													"    var appointment = jsonData.appointments[0];\r",
													"\r",
													"    pm.expect(appointment.vital_height).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_weight).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_temperature).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\").and.to.be.above(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8c3af06a-9bd4-4495-a4d2-7bcb0d95a7fd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-Doctor-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ca305b9-c42c-4c16-a2db-75df88e2498e",
												"exec": [
													"//This is supposed to give a 404 error, bug raised."
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bfda4b96-44af-48e8-8426-65187586823e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D5"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efbf57d0-30f3-4351-8c6d-4fe0a662cfc3",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "71f516f9-958e-44de-89ac-bf19a0275684",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2ca62e3-e3f6-4ac4-a23c-eb52e6acd2fb",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a1248f0a-43c7-4e01-9419-ae2c07214e9d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								},
								{
									"name": "Unique Patient Appointment (patient upi)-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "314a82d2-73af-4fc8-99a6-98118f1dba7e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7c8b97dd-5dab-4696-95f1-2e29cf989bc7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/appointment/unique/patient/D528326B"
									},
									"response": []
								}
							],
							"id": "cb677e6f-aadc-4d63-a675-353b77192451"
						}
					],
					"id": "19da03f0-2df7-49fa-a594-b97a2b8f6712"
				},
				{
					"name": "Drugs-AddGeneric",
					"item": [
						{
							"name": "Add Generic Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6e53971-b096-44c1-b090-97f67c082828",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is success\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Success message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Drug Generic Name Added successfully\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6ac80f75-1b62-4ded-b003-d495e7a7381d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"generic_id\" : \"MbG - 1003\",\n    \"generic\" : \"Test\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}api/drugs/generic-name"
							},
							"response": []
						},
						{
							"name": "Add Generic-AlreadyExists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e497245b-93c6-4a59-8d5e-f13a0588983f",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is failed\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(jsonData.error).to.eql(\"Generic name already exist\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "29f0822e-3b40-488f-a8ab-3c81d8856975",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"generic_id\" : \"MG - 100361\",\n    \"generic\" : \"Test\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}api/drugs/generic-name"
							},
							"response": []
						},
						{
							"name": "Add Generic-FieldsRequired",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6e53971-b096-44c1-b090-97f67c082828",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is failed\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Generic name - Error message is correct\", function () {\r",
											"    pm.expect(jsonData.error).to.eql(\"Generic name is required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Generic ID - Error message is correct\", function () {\r",
											"    pm.expect(jsonData.error).to.eql(\"Generic name is required\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "96a017ab-fa95-48d4-94c3-16f8e2fb23f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"generic_id\" : \"\",\n    \"generic\" : \"Test\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}api/drugs/generic-name"
							},
							"response": []
						},
						{
							"name": "Add Generic-NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6e53971-b096-44c1-b090-97f67c082828",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization error message is correct\", () => {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a1ef522d-67c2-4608-b652-b221d1fb34a0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"generic_id\" : \"\",\n    \"generic\" : \"Test\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}api/drugs/generic-name"
							},
							"response": []
						},
						{
							"name": "Add Generic-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6e53971-b096-44c1-b090-97f67c082828",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected field\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response content is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d5860b55-e2a7-4cb8-bce4-ef935211bac2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token_Invalid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"generic_id\" : \"BFR10\",\n    \"generic\" : \"Test\"\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{host}}api/drugs/generic-name"
							},
							"response": []
						}
					],
					"id": "2bb7269d-7521-474c-8fbb-94c539d26681"
				},
				{
					"name": "Drugs-FetchGenricDrugs",
					"item": [
						{
							"name": "Fetch generic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"generic\").that.is.an(\"array\").and.to.have.length.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Generic drug entry has required fields\", function () {\r",
											"    var genericData = jsonData.generic[0];\r",
											"\r",
											"    pm.expect(genericData).to.be.an(\"object\");\r",
											"    pm.expect(genericData).to.have.property(\"_id\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(genericData).to.have.property(\"generic_id\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(genericData).to.have.property(\"generic\").that.is.a(\"string\").and.to.not.be.null;\r",
											"   // pm.expect(genericData).to.have.property(\"createdAt\").that.is.a(\"string\");//.and.to.not.be.null;\r",
											"   // pm.expect(genericData).to.have.property(\"updatedAt\").that.is.a(\"string\");//.and.to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ae8549dc-274f-4a16-be4f-93b885d98a07",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected field\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response content is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9140bec1-ccb9-4feb-a69d-0e7972bb81eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token_Invalid}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic-ExpiredToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "673c216c-333f-473e-b211-5d3dbffa0318",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic-NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization error message is correct\", () => {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bc14ca17-0cd7-4a12-8eae-1ae1fa341718",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						}
					],
					"id": "5a2a2c77-4bc9-46b9-a838-450a09d10b84"
				},
				{
					"name": "Sponsors",
					"item": [
						{
							"name": "FetchSponsor",
							"item": [
								{
									"name": "Fetch Sponsors",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec57eeca-d10f-4546-a90c-228e0c16efcd",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.sponsors).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Sponsor details are valid\", function () {\r",
													"    var sponsor = jsonData.sponsors[0];\r",
													"\r",
													"    pm.expect(sponsor._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(sponsor.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fe6ba511-c4ea-46db-8374-3a6e5f233842",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-InValidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f09901fc-5e9c-4726-a64d-84fccf5474bc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2f09ff51-82c4-48dc-b0dd-2ed47674f9ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a7d1c149-4a1e-4941-96b4-781fe16688b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								}
							],
							"id": "9ccc1627-883c-40e4-a419-a7d35197393b"
						},
						{
							"name": "Sponsor-GetAll",
							"item": [
								{
									"name": "All Sponsor Plans",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4e73471-018a-4c04-abcd-e054d7b61677",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains sponsor plans\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.plans).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Plan details are valid\", function () {\r",
													"    var plan = jsonData.plans[0];\r",
													"    \r",
													"    pm.expect(plan._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"    pm.expect(plan.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2b27a75b-4426-4f40-a31e-355bea9b2003",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								},
								{
									"name": "All Sponsor Plans-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75d5cc47-f7f7-4acc-afbd-c640368f15fb",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "dd1ac28d-26d1-4457-97ee-007582ad3a31",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								},
								{
									"name": "All Sponsor Plans-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a250bfe-8058-4e0e-ba3c-55236b7e1de7",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fb56cb8c-0f95-419a-8896-ea210ba966bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								}
							],
							"id": "d25acf09-18ea-4783-8116-c0b261567b89"
						},
						{
							"name": "Fetch Unique Sponsor (uuid)",
							"item": [
								{
									"name": "Fetch Unique Sponsor (uuid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff9ddcd-d2e9-4277-a456-1f4760a474c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Sponsor data is valid\", function () {\r",
													"    pm.expect(jsonData.sponsor).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.phone).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.contact_email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.sponsor.contact_person).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(jsonData.sponsor.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b7536c92-394c-4e91-a6b5-4c2bcb546362",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff9ddcd-d2e9-4277-a456-1f4760a474c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Sponsor does not exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b926ba0b-d75d-48e8-9f0f-ba7d2425a9b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87E"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c47921f-f3b6-4f54-8d74-68015e6e8e58",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bfb0da89-1d01-4352-a94d-88be1c7e5e65",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bfe42b5-41a3-4faa-a0ff-acf4d585acc1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e0d19f2f-c454-4db9-862c-a8d202256231",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								}
							],
							"id": "49a2e9f6-f2e0-4640-8719-fa4523940675"
						},
						{
							"name": "Get Unique Plan by Name",
							"item": [
								{
									"name": "Get Unique Plan by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.plan).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Plan details are valid\", function () {\r",
													"    var plan = jsonData.plan;\r",
													"\r",
													"    pm.expect(plan._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"    pm.expect(plan.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b7a6542c-9af4-4f12-81d6-4ed23f0139d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name- NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Sponsor Plan does not exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "adc04a8d-c64c-432c-87c8-82c7956d19be",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAM"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "493045fc-2676-401b-a767-e42dfeecfcc7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8654f291-1f5e-4f8b-8d32-e130a2c28f74",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "77c29eda-ef32-4439-a800-cd838181fa13",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								}
							],
							"id": "45757feb-1c3b-4450-8d3c-e9aba3b00de6"
						}
					],
					"id": "a7983ea5-7c5c-48fb-82d5-e6dcaf01a1fe"
				},
				{
					"name": "Services",
					"item": [
						{
							"name": "Service-Create",
							"item": [
								{
									"name": "Create-Service-NotPermitted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd60acee-857a-42d0-9ebe-485ffcf2b289",
												"exec": [
													"//Should not be able to call this endpoint\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ac8c7fb4-3dff-48f4-a5ee-1d8a170b630c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Pathology Investigations\",\n    \"name\":\"Urea\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								}
							],
							"id": "76077e69-0edd-45fe-8b55-831ff7d062d4"
						},
						{
							"name": "fetch all services",
							"item": [
								{
									"name": "fetch all services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains services\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.services).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Service details are valid\", function () {\r",
													"    var service = jsonData.services[0];\r",
													"\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"   // pm.expect(service.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    //pm.expect(service.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c6932255-1fe4-442a-936c-ee4c9e007cf1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e8b1ddf0-f82d-4eed-9cb6-17197c564d5a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d52af8b1-8551-4120-b62b-a89a08509277",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d159eab5-601c-445c-8b36-c004be6ae2b3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								}
							],
							"id": "ab2498e0-c5e2-45a4-aad8-063983694cff"
						},
						{
							"name": "fetch all services by type",
							"item": [
								{
									"name": "Fetch Service by type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains services\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.services).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Service details are valid\", function () {\r",
													"    var service = jsonData.services[0];\r",
													"\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"   // pm.expect(service.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    //pm.expect(service.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e98b24df-586f-43e7-a56f-0f94de69f60d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "df821e82-9921-459e-8643-579ac97a6652",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5b821d4e-b2a4-4788-840a-d273fc1a1106",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1fcf65e0-ade3-4851-9238-dad4a69b97b5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-InvalidServiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"type must be Pathology Investigations, Imaging Investigation or Service\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "208d4dca-3f5e-48c9-b779-df1774880f79",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imcccc"
									},
									"response": []
								}
							],
							"id": "618c555c-c4d6-4c2a-9b3b-15f83080d581"
						},
						{
							"name": "Investigation by plan_code",
							"item": [
								{
									"name": "Get Investigation by plan_code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains investigations\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.investigations).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Investigation details are valid\", function () {\r",
													"    var investigation = jsonData.investigations[0];\r",
													"\r",
													"    pm.expect(investigation).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(investigation._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.price).to.be.a(\"number\").and.to.be.above(0).and.to.not.be.null;\r",
													"    pm.expect(investigation.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1c303592-fdec-4067-b2de-0dc35325857f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d47f7eed-7ac8-48ad-857a-fc991914c65e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-ExpireToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ee2904b1-d887-4195-9bc3-f219466c1b99",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9ae58f8b-6c88-4220-92c5-7b560e89a7f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fd527933-f6d0-4d7e-bd33-1735076d7c44",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9"
									},
									"response": []
								}
							],
							"id": "ae00f90a-0218-4534-9c7a-ff4a08c01c29"
						},
						{
							"name": "Imaging by plan_code",
							"item": [
								{
									"name": "Get Imaging by plan_code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains imaging data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.imaging).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Imaging details are valid\", function () {\r",
													"    var imaging = jsonData.imaging[0];\r",
													"\r",
													"    pm.expect(imaging.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(imaging._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.price).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(imaging.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "11417457-2182-408d-8a9e-d10c2d453d35",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f5ade6bc-4cae-41f4-832a-611fc1d14388",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3f4dcc2a-f9f2-49ec-a69d-ffa34718a864",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code -InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8bfc5fdb-67fa-4992-85d3-16092eb81dbe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c2ea2732-f28c-46c3-8f79-c2dc90f913a7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3333"
									},
									"response": []
								}
							],
							"id": "c829e766-0432-4ecd-9119-9928601ed59a"
						},
						{
							"name": "Otherservice by plan_code",
							"item": [
								{
									"name": "Get otherservice by plan_code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains other service data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.otherservice).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Other service details are valid\", function () {\r",
													"    var service = jsonData.otherservice[0];\r",
													"\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "21f2dcf2-ca62-4b03-8687-cad6ab1db930",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-NoCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "4d0003e3-53e5-493e-8787-e43d8d2ddffc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-ExpiredCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "980695d4-0134-44c6-b2b9-0b301a3a3c7c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6d572f20-fd82-4176-8eb7-fd7899e7ae4d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code_InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f5a50536-9bcb-450e-92be-b219cf8fe945",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C766"
									},
									"response": []
								}
							],
							"id": "932d8b09-b4c5-40c8-8fbb-04764632bf20"
						}
					],
					"id": "214ab59c-4693-4255-9390-2d14478b6663"
				}
			],
			"id": "e99a0d7c-5c7a-462f-8d2f-25c757494caa"
		},
		{
			"name": "RECEPTIONIST",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Authntication-Login(NonClinicalStaff)",
							"item": [
								{
									"name": "Login(staff) - Receptionist -Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb90aa48-33a0-4bba-a49d-3cf8680bbe55",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"receptionist _token\", jsonData.token)\r",
													"\r",
													"\r",
													"pm.test(\"Status is success and response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"User details and token exist\", function () {\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.token).to.be.a(\"string\").and.to.have.length.above(10);\r",
													"    pm.expect(jsonData.user._id).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.user.isActive).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d01bf122-3eb8-4846-aba0-ae000ffe1287",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"judith.michael@famacare.com\",\n    \"password\":\"BOBson246**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff)- Receptionist-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Failure message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid email or password\");\r",
													"});\r",
													"\r",
													"//This would fail because the code did not cater for user not found, bug raised."
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8a4255ab-87c3-469b-ae89-990bd37f69ca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukddddddemeka@fam.com\",\n    \"password\":\"Famacare123**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff) - Receptionist- InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb90aa48-33a0-4bba-a49d-3cf8680bbe55",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response contains an error array\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Error path is email\", function () {\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"email\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message specifies invalid email format\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"must be a valid email\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b2465802-c6b4-4409-aa51-44c29cb72b0e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"judith.michaelfamacarecom\",\n    \"password\":\"BOBson246**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								},
								{
									"name": "Login(staff)- Receptionist- InvalidPassword",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708fc950-4649-4b87-989a-12362f2bde94",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Failure message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid email or password\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9086fc11-365b-4a39-82b4-43e6d1944804",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"chukemeka@famacare.com\",\n    \"password\":\"Facare1hghg23**\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/login"
									},
									"response": []
								}
							],
							"id": "b4254c66-891c-471f-bf9e-32d186a7525a"
						},
						{
							"name": "Authentication-ForgotPassword",
							"item": [
								{
									"name": "Forgot - Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Success object is present\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.resetToken).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Successful reset message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"Password reset email sent\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9d6b0ad0-4c67-4a49-9b1e-652616d17888",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								},
								{
									"name": "Forgot- InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct error message is returned\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Email not registered\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8cd7d826-98ad-42b9-ba3f-2cfd8b5a8819",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morg+1@assurdly.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								},
								{
									"name": "Forgot Password - Missing Email Field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bc760f9-2837-4e8b-b6ff-efb9cdadd00b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Required email error message is returned\", function () {\r",
													"    pm.expect(jsonData.error[1].msg).to.eql(\"Email is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c77d48a9-617b-475a-a84d-159ca7a7f72f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/forgot"
									},
									"response": []
								}
							],
							"id": "d78d5e22-27b4-4942-84d1-fa54f2100f53"
						},
						{
							"name": "Authentication-VerifyToken",
							"item": [
								{
									"name": "Verify Token - Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation is successful\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.true;\r",
													"    pm.expect(jsonData.user).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.user.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.user.iat).to.be.a(\"number\").and.to.be.below(jsonData.user.exp);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1c83a4a0-a3ed-4da2-ab3d-267a501e1a33",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imp1ZGl0aC5taWNoYWVsQGZhbWFjYXJlLmNvbSIsInJvbGUiOiJSZWNlcHRpb25pc3QiLCJpYXQiOjE3Mzk3MzQxMjksImV4cCI6MTczOTc2MjkyOX0.7PMnXnWV8vxMa_fHYlIcF8vUBqF5EI8cHhA7SeSYdG4\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								},
								{
									"name": "Verify Token- EmptyToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains an error array\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Error path is token\", function () {\r",
													"    pm.expect(jsonData.error[0].path).to.eql(\"token\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message should specify that token is required\", function () {\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"Token is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1b203dd6-9467-4970-bff3-320d64c96a02",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								},
								{
									"name": "Verify Token-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2495a63e-4958-43c9-82d0-7a1b5f337ac4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation error is returned\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.false;\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid or expired token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "719f9f7d-cbf3-418c-8ba7-64a1afeaf786",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfR\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/verifytoken"
									},
									"response": []
								}
							],
							"id": "39be5f7b-4fcb-47a8-b1a5-b2e7ac482c2e"
						},
						{
							"name": "Authentication-ResetPassword",
							"item": [
								{
									"name": "Reset Password -successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"// var jsonData = pm.response.json();\r",
													"\r",
													"// pm.test(\"Response code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Password update was successful\", function () {\r",
													"//     pm.expect(jsonData.status).to.eql(\"success\");\r",
													"//     pm.expect(jsonData.message).to.include(\"Password updated successfully\");\r",
													"// });\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "06bfe1e7-0a2b-494e-8a26-1d4e3cbbb2c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfRMqCtkw\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Token validation failed\", function () {\r",
													"    pm.expect(jsonData.valid).to.be.false;\r",
													"    pm.expect(jsonData.error).to.eql(\"Invalid or expired token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "3a282972-6533-4a13-9e7b-7b7696380bf1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"morgan+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfR\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password-InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"User registration error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"user with email not registered\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f2208ca2-ad4b-4d64-b3a8-8a35c16c114e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"mor+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1vcmdhbisxQGFzc3VyZGx5LmNvbSIsImlhdCI6MTczOTM5ODY3MiwiZXhwIjoxNzM5NDAyMjcyfQ.KJRwnZpofKKcNCx6B-s1nDRPp7VMYLC37kZfRMqCtkw\"\n  \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								},
								{
									"name": "Reset Password - Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24d3bcc4-e571-4349-820f-a0d02a739fba",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Required token error message is returned\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error[0].msg).to.eql(\"Token is required\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f79d53f4-6e3a-418a-b39b-f525e27a41c1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\":\"mor+1@assurdly.com\",\n    \"password\":\"Password123!\",\n    \"token\":\"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/auth/reset-password"
									},
									"response": []
								}
							],
							"id": "7d23f1bc-130d-4ca3-bc19-4bc538921006"
						}
					],
					"id": "408e3341-f430-43f6-9ceb-23e792867daa"
				},
				{
					"name": "Departments",
					"item": [
						{
							"name": "FetchDepts - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Departments data is valid\", () => {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.departments).to.be.an(\"array\").and.to.have.length.above(0);\r",
											"    pm.expect(jsonData.departments[0].name).to.be.a(\"string\").and.to.not.be.null;;\r",
											"    pm.expect(jsonData.departments[0].isActive).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d2ea6e72-014c-44f6-8505-1faaaa90ea0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{receptionist _token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/department/office/{{office_uuid}}"
							},
							"response": []
						},
						{
							"name": "FetchDepts - OfficeNoFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is failed\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Office not found error message is correct\", function () {\r",
											"    pm.expect(jsonData.error).to.eql(\"office not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2cf29ba6-7662-43d3-869f-097d0b06db42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{receptionist_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/department/office/{{office_}}"
							},
							"response": []
						},
						{
							"name": "Fetch Departments -No Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization error message is returned\", () => {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "40c69162-1293-4df1-b880-b0024e0a8da0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/department/office/{{office_uuid}}"
							},
							"response": []
						},
						{
							"name": "Fetch Departments -Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2795c34e-0f10-4af3-9e93-12dfe24a5d78",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ea640180-8641-4f1b-b014-dc6067a083c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token_Invalid}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{host}}api/department/office/{{office_uuid}}?Authorization=Bearer {{receptionist_token_Invalid}}",
									"host": [
										"{{host}}api"
									],
									"path": [
										"department",
										"office",
										"{{office_uuid}}"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "Bearer {{receptionist_token_Invalid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "0e7b0649-d77e-4c69-9d94-b8172e2cd07c"
				},
				{
					"name": "Users(Patient)",
					"item": [
						{
							"name": "Users(Patient)-Register",
							"item": [
								{
									"name": "Register Patient-Receptionist-Self - successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration was successful\", () => {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.message).to.include(\"patient registered successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8f96d9ab-8a6a-45f3-ab5e-bc94be35984e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											},
											{
												"key": "Email",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Receptionist-Sponsor - Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"patient registered successfully\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "de832f02-ca44-4b2d-854d-f04d1e8ccfaa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											},
											{
												"key": "Email",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Asknello\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}api/patient/register?Email={{randomEmail}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"register"
											],
											"query": [
												{
													"key": "Email",
													"value": "{{randomEmail}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Register Patient-Receptionist-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "68ccba16-3f4b-4e2c-9693-b2594f73527f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"tolutst@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Receptionist-EmailExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient registration failure message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.include(\"patient with email already exists\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7b19d01f-4948-4d6d-b770-10c70dd30054",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Receptionist-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "56a6dd39-d916-47d6-ad85-97af0d491a28",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Receptionist-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b5ac0536-5b2d-48d0-b88d-bcd36eb15c56",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail.com\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Receptionist-InvalidEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Email validation error exists\", () => {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"    pm.expect(jsonData.error[0].msg).to.include(\"email must be a valid email\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "79260905-f426-4efb-8295-eddf9084d365",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mat\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"toluteest@gmail\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{office_uuid}}\",\n    \"office\":\"{{office}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								},
								{
									"name": "Register Patient-Receptionist-EmptyOffice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3069ea2a-fedc-486d-aef4-763d75226501",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Office not found error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Office with the provided office_uuid and office not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d84b2c19-3967-466a-a5f5-2da3d48b6855",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											},
											{
												"key": "Email",
												"value": "{{randomEmail}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    //requires authentication \n\n    \"title\":\"Mr\",\n    \"firstname\":\"Mab\",\n    \"lastname\":\"Lawal\",\n    \"email\":\"{{randomEmail}}\",\n    \"phone\":\"09023172944\",\n    \"office_uuid\":\"{{}}\",\n    \"office\":\"{{}}\",\n    \"gender\":\"Male\",\n    \"dob\":\"2024-11-07\",\n    \"marital_status\":\"Single\",\n    \"middlename\":\"Tobi\",\n    \"address\":\"Ojodu Berger Avenue\",\n    \"city\":\"Ikeja GRA\",\n    \"state\":\"Lagos\",\n    \"religion\":\"Christianity\",\n    \"occupation\":\"Software Engineer\",\n    \"blood_group\":\"A+\",\n    \"genotype\":\"AA\",\n    \"next_of_kin\":\"Bisi Lawal\",\n    \"next_of_kin_relationship\":\"Sibling\",\n    \"next_of_kin_phone\":\"07066237379\",\n    \"next_of_kin_address\":\"same as mine\",\n\n    \"sponsor\":\"Self Sponsor\", //See Sponsor -> fetch sponsors\n    \"sponsor_plan\":\"FAMACARE PRICELIST\" //FIXED\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/register"
									},
									"response": []
								}
							],
							"id": "941a95d5-d228-4f99-91b1-b15437296255",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "60088e7f-c1eb-423c-a126-cb627b3c9c4d",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"var randomString = Math.random().toString(36).substring(7); \r",
											"var email = `user_${randomString}@example.com`;\r",
											"\r",
											"pm.environment.set(\"randomEmail\", email);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61bb8170-f80b-40b8-ad3a-62fe07b84acc",
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Users(Patient) - ALL",
							"item": [
								{
									"name": "Get All Patient- Receptionist -Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patients data is valid\", () => {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.patients).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"\r",
													"    pm.expect(jsonData.patients[0]._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patients[0].allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d50e6dbb-2bba-403a-ab17-9da706a68196",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								},
								{
									"name": "Get All Patient-Receptionist-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "00a429f1-cedd-464d-8c0f-39f66045f975",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								},
								{
									"name": "Get All Patient- Receptionist-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a4be6d-ff5c-4467-b3cb-49889945911c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "27504616-8450-4829-bb3e-ae9243e54b42",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/all"
									},
									"response": []
								}
							],
							"id": "be9e782b-01ee-4550-9538-828615fded00"
						},
						{
							"name": "Users(Patient)-Unique(upi)",
							"item": [
								{
									"name": "Get Unique Patient(upi)-Receptionist-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains valid patient fields\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.patient).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Patient details are correctly returned\", function () {\r",
													"    pm.expect(jsonData.patient._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.patient.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5f033848-0b7c-47bc-b416-f292248089f8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-Receptionist-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a06a2546-1524-4361-a7ba-d47fb85dff16",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-Receptionist-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "195d2291-ea04-4f34-a5c1-bcd57ab52cdc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Get Unique Patient(upi)-Doctor-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0043d438-8604-4ec2-a606-7047e2f5f4b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.be.a(\"string\").and.to.eql(\"Patient not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "8031ccfd-6066-4daa-957b-ffd15c1b7648",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/patient/unique/D5"
									},
									"response": []
								}
							],
							"id": "59a8b08d-e1ca-480a-88e0-c1791dd8833e"
						},
						{
							"name": "Users(PatientSearch)",
							"item": [
								{
									"name": "Search Patient by lastname-Receptionist-successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1551ff6-7ec2-42d6-9e2b-ffffc3085e51",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Users array is valid and contains at least one user\", function () {\r",
													"    pm.expect(jsonData.users).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"First user details are properly structured\", function () {\r",
													"    let user = jsonData.users[0];\r",
													"\r",
													"    pm.expect(user._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9459bb1c-b945-446d-a3fe-74f472f46d1f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient Receptionist-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cc8e1fe-7645-4f19-af43-43a6cff77c23",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "143a9890-6cd2-4c82-ae1b-736f8e75bef1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by lastname-Receptionist-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57f4afee-4074-4ebb-a59c-fa11ab6f57cd",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "dd0e8191-64a3-4a2c-9fd6-30d2d7fb71e1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=kate",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "kate"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by upi-Receptionist-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5ac424-0373-4c25-9059-92b765fdd1c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Users array is valid and contains at least one user\", function () {\r",
													"    pm.expect(jsonData.users).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"First user details are properly structured\", function () {\r",
													"    let user = jsonData.users[0];\r",
													"\r",
													"    pm.expect(user._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.blood_group).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.next_of_kin).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(user.allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d56b4767-5b2b-4a1f-843b-bc5244eb4947",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=56C36693",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "56C36693"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by upi-Receptionist-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5ac424-0373-4c25-9059-92b765fdd1c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "18990704-db0e-4ab0-bc97-cc4a6b64ab99",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query=56C36693",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "56C36693"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by uuid-Receptionist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee104cbf-dde7-4a27-85fb-f563bae52272",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success and code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"// pm.test(\"Users array exists and can be empty\", function () {\r",
													"//     pm.expect(jsonData.users).to.be.an(\"array\");\r",
													"//     pm.expect(jsonData.users.length).to.be.at.least(0);\r",
													"// });\r",
													"\r",
													"//Thi is commented out because the user field is not supposed to be zero and the script would be upadted. Currently only one uuid is live \r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c7562ec2-b52c-4945-8203-d8a6db3aa499",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query={{office_uuid}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "{{office_uuid}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search Patient by uuid-Receptionist-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee104cbf-dde7-4a27-85fb-f563bae52272",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "619a47d0-948b-479f-bba8-f72fb7026b60",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{host}}api/patient/search-users?query={{office_uuid}}",
											"host": [
												"{{host}}api"
											],
											"path": [
												"patient",
												"search-users"
											],
											"query": [
												{
													"key": "query",
													"value": "Anthony",
													"disabled": true
												},
												{
													"key": "query",
													"value": "{{office_uuid}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "16525659-0272-4fdf-be98-10743a8ad7be"
						},
						{
							"name": "Users(Patient)-Update(upi)",
							"item": [
								{
									"name": "Update Patient (upi)-Update-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response has status code 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Patient update was successful\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.message).to.eql(\"Patient updated successfully\");\r",
													"});\r",
													"\r",
													"pm.test(\"Patient data structure is valid\", function () {\r",
													"    var patient = jsonData.patient;\r",
													"\r",
													"    pm.expect(patient).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(patient._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.fullname).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.upi).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(patient.phone).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.office).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(patient.isActive).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Allergies data structure is valid\", function () {\r",
													"    var allergies = jsonData.patient.allergies;\r",
													"\r",
													"    pm.expect(allergies).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(allergies.drugs).to.be.an(\"array\");\r",
													"    pm.expect(allergies.food).to.be.an(\"array\");\r",
													"    pm.expect(allergies.other).to.be.an(\"array\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e6bc8be3-3320-4808-a77d-d38ea68aa290",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-EmptyFields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error list is not empty\", function () {\r",
													"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Validating required fields\", function () {\r",
													"    var requiredFields = [\r",
													"        \"title\", \"firstname\", \"lastname\", \"email\", \"phone\", \"gender\", \"dob\", \r",
													"        \"marital_status\", \"city\", \"state\", \"religion\", \"occupation\", \r",
													"        \"blood_group\", \"genotype\", \"next_of_kin_relationship\"\r",
													"    ];\r",
													"\r",
													"    requiredFields.forEach(field => {\r",
													"        pm.expect(jsonData.error.some(err => err.path === field)).to.be.true;\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Each error object has required properties\", function () {\r",
													"    jsonData.error.forEach(error => {\r",
													"        pm.expect(error).to.have.property(\"msg\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"path\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"type\").that.is.a(\"string\");\r",
													"        pm.expect(error).to.have.property(\"location\").that.is.a(\"string\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "51b62578-ffb7-4f14-9933-371162c30d4b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"\",\n        \"firstname\": \"\",\n        \"lastname\": \"\",\n        \"middlename\": \"\",\n        \"marital_status\": \"\",\n        \"email\": \"\",\n        \"phone\": \"\",\n        \"address\": \"\",\n        \"state\": \"\",\n        \"city\": \"\",\n        \"religion\": \"\",\n        \"blood_group\": \"\",\n        \"genotype\": \"\",\n        \"next_of_kin\": \"\",\n        \"next_of_kin_relationship\": \"\",\n        \"next_of_kin_phone\": \"\",\n        \"next_of_kin_address\": \"\",\n        \n        \"sponsor\": \"\",\n        \"sponsor_plan\": \"\", //fixed\n        \"occupation\": \"\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"\",\n        \"gender\": \"\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "629cb3cd-6bf9-4ff8-a97a-9509ed84a1de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								},
								{
									"name": "Update Patient (upi)-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a96ab6-ba46-484b-8231-3ecd55424292",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "67a9ddf8-5822-45d7-b3b3-cf40ac5ab0e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"title\": \"Mr\",\n        \"firstname\": \"Edon\",\n        \"lastname\": \"Anthony\",\n        \"middlename\": \"Edifice\",\n        \"marital_status\": \"Single\",\n        \"email\": \"edidiongbobson@gmail.com\",\n        \"phone\": \"09023172944\",\n        \"address\": \"Ojodu Berger Avenue Road\",\n        \"state\": \"Lagos\",\n        \"city\": \"Ojodu\",\n        \"religion\": \"Christianity\",\n        \"blood_group\": \"A+\",\n        \"genotype\": \"AA\",\n        \"next_of_kin\": \"Thompson Bobson\",\n        \"next_of_kin_relationship\": \"Sibling\",\n        \"next_of_kin_phone\": \"07066237376\",\n        \"next_of_kin_address\": \"same as mine\",\n        \n        \"sponsor\": \"Asknello\",\n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //fixed\n        \"occupation\": \"Software Engineer\",\n        \"profileImage\": null,\n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{{office_uuid}}\",\n        \"dob\": \"2024-11-07\",\n        \"gender\": \"Male\"\n        \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/patient/unique/D528326B"
									},
									"response": []
								}
							],
							"id": "78701a5b-4918-4dd8-ac20-3204b91ffb92"
						},
						{
							"name": "Users(Patient)-DEL",
							"item": [
								{
									"name": "Delete Unique Patient",
									"id": "5739fedc-1cff-4de3-bd4c-e5aba6eba28e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text"
											}
										],
										"url": "{{host}}/api/patient/unique/CEFD2ED6"
									},
									"response": []
								}
							],
							"id": "fde2a51b-93c8-413a-a041-74e0071a4e77"
						}
					],
					"id": "4ebb00d8-75e1-4937-a400-7285393ea935"
				},
				{
					"name": "Users(Staff)",
					"item": [
						{
							"name": "Users(Staff)-Clinical",
							"item": [
								{
									"name": "Get Clinical Staff-Receptionist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Clinical staff data is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.clinicalstaff).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Clinical staff member contains required fields\", function () {\r",
													"    pm.expect(jsonData.clinicalstaff[0]).to.be.an(\"object\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0]._id).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].firstname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].lastname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].email).to.be.a(\"string\").and.to.include(\"@\").and.to.include(\".\");\r",
													"    pm.expect(jsonData.clinicalstaff[0].phone).to.be.a(\"string\").and.to.not.include(\"number\");\r",
													"    pm.expect(jsonData.clinicalstaff[0].office).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].department).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].isActive).to.be.a(\"boolean\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].aos).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.clinicalstaff[0].dob).to.be.a(\"string\").and.to.have.lengthOf(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1c0c2b13-b909-4927-a4f5-6eec10296193",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								},
								{
									"name": "Get Clinical Staff-Receptionist-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fca59604-cb52-443d-8408-9423d7f4dd7e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								},
								{
									"name": "Get Clinical Staff-Receptionist-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6bf00538-624b-44c0-a444-de6c7035b167",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								},
								{
									"name": "Get Clinical Staff-Receptionist-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc960a5-6bc2-4907-9cf5-b0c586429a40",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "d4c9014e-2c98-489f-8f95-6fe6431c7e9a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/user/clinicalstaff"
									},
									"response": []
								}
							],
							"id": "da5f42bf-3d6e-4149-a083-316ca9153b3f"
						},
						{
							"name": "Users(Staff)-NoneClinical",
							"item": [
								{
									"name": "Non Clinical Staff-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Non-clinical staff data is valid\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.nonclinicalstaff).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Non-clinical staff member contains required fields\", function () {\r",
													"    pm.expect(jsonData.nonclinicalstaff[0]).to.be.an(\"object\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0]._id).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].firstname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].lastname).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].email).to.be.a(\"string\").and.to.include(\"@\").and.to.include(\".\");\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].phone).to.be.a(\"string\").and.to.not.include(\"number\");\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].office).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].role).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].department).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].uuid).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].isActive).to.be.a(\"boolean\").and.to.not.be.null;;\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].aos).to.be.a(\"string\").and.to.not.be.null;;\r",
													"    pm.expect(Number(jsonData.nonclinicalstaff[0].fee)).to.be.a(\"number\").and.to.be.at.least(0);\r",
													"    pm.expect(jsonData.nonclinicalstaff[0].dob).to.be.a(\"string\").and.to.have.lengthOf(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fdd2403a-7216-4ea0-a06d-d245206ae823",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								},
								{
									"name": "Non Clinical Staff-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "052e994e-dc20-4ae5-a551-e563d49671f2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								},
								{
									"name": "Non Clinical Staff-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "345f72fd-f856-4093-b74b-8acd0080075a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist_token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								},
								{
									"name": "Non Clinical Staff- NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "018d5e75-02bd-4480-add2-ecd1afb2c153",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "51c26501-b2aa-4f6d-b7ad-78fe3cf8e9ed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": "{{host}}api/user/nonclincalstaff"
									},
									"response": []
								}
							],
							"id": "eee794c9-ca0d-45f3-b47f-6dc8453c1072"
						}
					],
					"id": "a1faaa0c-965d-408e-aded-4429df34529f"
				},
				{
					"name": "Role-GetRoles",
					"item": [
						{
							"name": "Get Roles-Receptionist-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10249eda-cef5-41b3-b1cb-37719b836075",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Roles data is valid\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"    pm.expect(jsonData.roles).to.be.an(\"array\").and.to.have.length.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"First role contains required fields\", function () {\r",
											"    pm.expect(jsonData.roles[0]).to.be.an(\"object\").and.to.not.be.null;\r",
											"    pm.expect(jsonData.roles[0]._id).to.be.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(jsonData.roles[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(jsonData.roles[0].name).to.be.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(jsonData.roles[0].createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3e1127ad-2ff1-4d5a-b3ff-717e9f3521d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer Bearer {{receptionist _token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/role/{{office_uuid}}"
							},
							"response": []
						},
						{
							"name": "Get Roles-Receptionist-NotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10249eda-cef5-41b3-b1cb-37719b836075",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is correct\", function () {\r",
											"    pm.response.to.have.status(404); \r",
											"});\r",
											"\r",
											"pm.test(\"Response indicates failure\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Medcenter not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "abc06e76-9d46-4fe3-af76-d17cf3c1db93",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{receptionist _token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/role/{{office_"
							},
							"response": []
						},
						{
							"name": "Get Roles-Receptionist-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10249eda-cef5-41b3-b1cb-37719b836075",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											"\r",
											"\r",
											"//commented out because even with the invalid token we geta 200"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "87bea751-a833-470e-9100-94a2e21c2c1a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{receptionist _token_Invalid}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/role/{{office_uuid}}"
							},
							"response": []
						},
						{
							"name": "Get Roles-Receptionist-NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10249eda-cef5-41b3-b1cb-37719b836075",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization error message is correct\", () => {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ab8effdb-60be-4c82-aee4-bf4a5b538e50",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token_Invalid}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/role/{{office_uuid}}"
							},
							"response": []
						}
					],
					"id": "fc44dd91-b86b-466c-a7f4-f3ff8714a717"
				},
				{
					"name": "Role",
					"item": [
						{
							"name": "Role-GetRoles",
							"item": [
								{
									"name": "Role - Get Roles",
									"item": [
										{
											"name": "Get Roles - Receptionist-Successful",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10249eda-cef5-41b3-b1cb-37719b836075",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Roles data is valid\", function () {\r",
															"    pm.expect(jsonData.status).to.eql(\"success\");\r",
															"    pm.expect(jsonData.roles).to.be.an(\"array\").and.to.have.length.above(0);\r",
															"});\r",
															"\r",
															"pm.test(\"First role contains required fields\", function () {\r",
															"    pm.expect(jsonData.roles[0]).to.be.an(\"object\").and.to.not.be.null;\r",
															"    pm.expect(jsonData.roles[0]._id).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(jsonData.roles[0].office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(jsonData.roles[0].name).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(jsonData.roles[0].createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "cce0f4b2-7d7b-41ef-85e9-d0eb13053aaf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/role/{{office_uuid}}"
											},
											"response": []
										},
										{
											"name": "Get Roles - Super Admin - Not Found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10249eda-cef5-41b3-b1cb-37719b836075",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404); \r",
															"});\r",
															"\r",
															"pm.test(\"Response indicates failure\", function () {\r",
															"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message is correct\", function () {\r",
															"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Medcenter not found\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "e0fb472e-9251-4b61-bc2b-eb19385878ac",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/role/{{office_invalid}}"
											},
											"response": []
										},
										{
											"name": "Get Roles - Super Admin - Invalid Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10249eda-cef5-41b3-b1cb-37719b836075",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body contains error message\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "18e5ee63-5f87-4bf4-a0df-79c0d8ea5149",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist_token_Invalid}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/role/{{office_uuid}}"
											},
											"response": []
										},
										{
											"name": "Get Roles - Super Admin - No Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10249eda-cef5-41b3-b1cb-37719b836075",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response code is 401\", () => {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Authorization error message is returned\", () => {\r",
															"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "3a591136-5ca0-4aca-81e9-1ce8230b9ea7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{super_admin_token_Invalid}}",
														"type": "text",
														"disabled": true
													}
												],
												"url": "{{host}}api/role/{{office_uuid}}"
											},
											"response": []
										}
									],
									"id": "72db998a-6f4e-4d9e-a4d2-93c9a522c282"
								}
							],
							"id": "7bacfa91-9ed8-4630-9712-1a8b9603caa6"
						}
					],
					"id": "35ae5684-edda-42cb-ba42-2b191d161fd0"
				},
				{
					"name": "Appointment",
					"item": [
						{
							"name": "Appointment",
							"item": [
								{
									"name": "Appointment-Schedule",
									"item": [
										{
											"name": "Schedule-Receptionist-Successful",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response status is success\", function () {\r",
															"    pm.expect(jsonData.status).to.eql(\"success\");\r",
															"});\r",
															"\r",
															"pm.test(\"Appointment scheduling success message is correct\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Appointment scheduled successfully\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "87de0fde-4a84-4cdc-9899-dc0a416220f8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/schedule"
											},
											"response": []
										},
										{
											"name": "Schedule-Receptionist-ExpiredToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Token expiration message is correct\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "95dbe12a-e9bd-40b3-999c-2a84b6c40a45",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ExpiredToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/schedule"
											},
											"response": []
										},
										{
											"name": "Schedule-Receptionist-InvalidToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body contains error message\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "1b0fb834-80a5-4986-9b71-a07777305049",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token_Invalid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/schedule"
											},
											"response": []
										},
										{
											"name": "Schedule-Receptionist-NoToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response code is 401\", () => {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Authorization error message is correct\", () => {\r",
															"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "b16d0b18-3b61-4793-8b8e-466ee0d597af",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n       \n        \"firstname\": \"Edidiong\",\n        \"lastname\": \"Anthony\",\n       \n        \"upi\": \"D528326B\",\n      \n        \"email\": \"edidiongbobson@gmail.com\",\n        \"purpose\":\"Doctor Visitation\",\n    \n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"Dr Humphrey\",\n        \"visit_type\":\"New Encounter\",\n        \"visit_date\":\"17/02/2025\",\n    \"scheduled_time\":\"5:00 pm\",\n    \"is_urgent\":false,\n        \"sponsor\": \"Asknello\",  // refer to sponsor folder \n        \"sponsor_plan\": \"FAMACARE PRICELIST\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/schedule"
											},
											"response": []
										},
										{
											"name": "Schedule-Receptionist-FieldsRequired",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76460baa-0d58-4a9d-91be-4fadb2157df1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Error response structure is valid\", function () {\r",
															"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
															"    pm.expect(jsonData.error).to.be.an(\"array\").and.to.have.length.above(0);\r",
															"});\r",
															"\r",
															"pm.test(\"Required field errors are returned\", function () {\r",
															"    var errorMessages = jsonData.error.map(item => item.msg);\r",
															"    \r",
															"    pm.expect(errorMessages).to.include(\"Firstname is required\");\r",
															"    pm.expect(errorMessages).to.include(\"Last name is required\");\r",
															"    pm.expect(errorMessages).to.include(\"Email is required\");\r",
															"    pm.expect(errorMessages).to.include(\"upi is required\");\r",
															"    pm.expect(errorMessages).to.include(\"purpose is required\");\r",
															"    pm.expect(errorMessages).to.include(\"consultant is required\");\r",
															"    pm.expect(errorMessages).to.include(\"visit_type is required\");\r",
															"    pm.expect(errorMessages).to.include(\"visit_date is required\");\r",
															"    pm.expect(errorMessages).to.include(\"sponsor is required\");\r",
															"    pm.expect(errorMessages).to.include(\"sponsor_plan is required\");\r",
															"    pm.expect(errorMessages).to.include(\"scheduled_time is required\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "c816a61b-36f3-431f-8820-bd79c60045d5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n       \n        \"firstname\": \"\",\n        \"lastname\": \"\",\n        \"upi\": \"\",\n        \"email\": \"\",\n        \"purpose\":\"\",\n        \"vital_height\": 160,\n        \"vital_weight\": 81,\n        \"vital_blood_pressure\":120,\n        \"vital_temperature\":180,\n        \"vital_pulserate\":300,\n        \"consultant\":\"\",\n        \"visit_type\":\"\",\n        \"visit_date\":\"\",\n    \"scheduled_time\":\"\",\n    \"is_urgent\":false,\n        \"sponsor\": \"\",  // refer to sponsor folder \n        \"sponsor_plan\": \"\", //FIX\n        \n        \"office\": \"{{office}}\",\n        \"office_uuid\": \"{office_uuid}\"\n      \n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/schedule"
											},
											"response": []
										}
									],
									"id": "f15efed8-f601-4f69-ad25-f8b156d0cc52"
								},
								{
									"name": "Appointment-Get",
									"item": [
										{
											"name": "Get Appointments-Receptionist-Successful",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e82217f-6d25-4a63-9a99-7acab1bf0d5b",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Appointments response structure is valid\", function () {\r",
															"    pm.expect(jsonData.status).to.eql(\"success\");\r",
															"    pm.expect(jsonData.appointments).to.be.an(\"array\").and.to.have.length.above(0);\r",
															"});\r",
															"\r",
															"pm.test(\"Appointment contains required fields\", function () {\r",
															"    var appointment = jsonData.appointments[0];\r",
															"\r",
															"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
															"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
															"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
															"});\r",
															"\r",
															"pm.test(\"Vital signs have expected values\", function () {\r",
															"    var appointment = jsonData.appointments[0];\r",
															"\r",
															"    pm.expect(appointment.vital_height).to.be.a(\"number\");\r",
															"    pm.expect(appointment.vital_weight).to.be.a(\"number\");\r",
															"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\");\r",
															"    pm.expect(appointment.vital_temperature).to.be.a(\"number\");\r",
															"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "c6f2456d-0f91-4c40-9db6-87f7820f6df3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/all"
											},
											"response": []
										},
										{
											"name": "Get Appointments-Receptionist-ExpiredToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e82217f-6d25-4a63-9a99-7acab1bf0d5b",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Token expiration message is correct\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "446049fe-d934-4e57-96db-ed9c20b3b5ea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ExpiredToken}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/all"
											},
											"response": []
										},
										{
											"name": "Get Appointments-Receptionist-InvalidToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b4ad3b7-cb02-475e-b687-782b5150c46b",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body contains error message\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "d349e065-6863-447c-9466-fdaee3303ad0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token_Invalid}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/all"
											},
											"response": []
										},
										{
											"name": "Get Appointments-Receptionist-NoToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9a8b4bdc-7672-4e94-9c19-fd15a7995f30",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response code is 401\", () => {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Authorization error message is correct\", () => {\r",
															"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "67d1190c-7601-4678-9c4d-ea2560de5aac",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/all"
											},
											"response": []
										}
									],
									"id": "70ffcf85-6bfb-4432-b0b7-65d4697cde89"
								},
								{
									"name": "Appointment-GetUnique",
									"item": [
										{
											"name": "Get Unique Appointment-Receptionist-Successful",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Appointment retrieval is successful\", function () {\r",
															"    pm.expect(jsonData.status).to.eql(\"success\");\r",
															"    pm.expect(jsonData).to.have.property(\"appointment\").that.is.an(\"object\");\r",
															"});\r",
															"\r",
															"pm.test(\"Appointment contains required fields\", function () {\r",
															"    var appointment = jsonData.appointment;\r",
															"\r",
															"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
															"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
															"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
															"});\r",
															"\r",
															"pm.test(\"Vital signs have expected numeric values\", function () {\r",
															"    var appointment = jsonData.appointment;\r",
															"\r",
															"    pm.expect(appointment.vital_height).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_weight).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_temperature).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\").and.to.be.above(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "bd6da621-cfaf-4307-8239-22c59c140011",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/unique/ABE200E2"
											},
											"response": []
										},
										{
											"name": "Get Unique Appointment-Receptionist-InvalidToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body contains error message\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "c9282e46-1cd5-4777-ae2b-380d0a8d7155",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/unique/ABE200E2"
											},
											"response": []
										},
										{
											"name": "Get Unique Appointment-NoFound",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a7fef80-7a56-4598-ae04-16686d6825c1",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status is failed\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"status\", \"failed\");\r",
															"});\r",
															"pm.test(\"Appointment not found message is correct\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\", \"Appointment not found\");\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "8fc5f998-220f-4935-aadd-30d48f4b4679",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/unique/0703CEB9"
											},
											"response": []
										},
										{
											"name": "Get Unique Appointment-ExpiredToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "56b4f983-c344-4c9a-95b3-7878b86778a6",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Token expiration message is correct\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "50806ef5-a68b-4bc5-9d33-3906ee27ab38",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ExpiredToken}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/unique/0703CEB9"
											},
											"response": []
										}
									],
									"id": "7e27ec4b-1c37-47a6-a80d-ee1ef66bd6a5"
								},
								{
									"name": "Appointment-Patient upi",
									"item": [
										{
											"name": "Unique Patient Appointment (patient upi)-Receptionist-Successful",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ca305b9-c42c-4c16-a2db-75df88e2498e",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Appointments retrieval is successful\", function () {\r",
															"    pm.expect(jsonData.status).to.eql(\"success\");\r",
															"    pm.expect(jsonData).to.have.property(\"appointments\").that.is.an(\"array\").and.to.have.length.above(0);\r",
															"});\r",
															"\r",
															"pm.test(\"Appointment contains required fields\", function () {\r",
															"    var appointment = jsonData.appointments[0];\r",
															"\r",
															"    pm.expect(appointment._id).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.firstname).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.lastname).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.upi).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.email).to.be.a(\"string\").and.to.include(\"@\");\r",
															"    pm.expect(appointment.purpose).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.visit_type).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.visit_date).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.scheduled_time).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.is_urgent).to.be.a(\"boolean\");\r",
															"    pm.expect(appointment.sponsor).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.sponsor_plan).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.office).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.office_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.consultant).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.consultant_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
															"    pm.expect(appointment.is_billed).to.be.a(\"boolean\");\r",
															"});\r",
															"\r",
															"pm.test(\"Vital signs have expected numeric values\", function () {\r",
															"    var appointment = jsonData.appointments[0];\r",
															"\r",
															"    pm.expect(appointment.vital_height).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_weight).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_blood_pressure).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_temperature).to.be.a(\"number\").and.to.be.above(0);\r",
															"    pm.expect(appointment.vital_pulserate).to.be.a(\"number\").and.to.be.above(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "66a7f712-aee1-4f89-90bd-3d16ed2a6633",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/unique/patient/D528326B"
											},
											"response": []
										},
										{
											"name": "Unique Patient Appointment (patient upi)-Receptionist-NotFound",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ca305b9-c42c-4c16-a2db-75df88e2498e",
														"exec": [
															"//This is supposed to give a 404 error, bug raised.\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "3543a298-82d9-4291-a251-4c4bfa7e52fd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/unique/patient/D5"
											},
											"response": []
										},
										{
											"name": "Unique Patient Appointment (patient upi)-InvalidToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "efbf57d0-30f3-4351-8c6d-4fe0a662cfc3",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Response body contains error message\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "537db49b-9337-44f1-8c10-99c5de217290",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{receptionist _token_Invalid}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/unique/patient/D528326B"
											},
											"response": []
										},
										{
											"name": "Unique Patient Appointment (patient upi)-NoToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2ca62e3-e3f6-4ac4-a23c-eb52e6acd2fb",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response code is 401\", () => {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Authorization error message is correct\", () => {\r",
															"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "7e8ed291-7a7f-4844-82a4-51b79bea2d14",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": "{{host}}api/appointment/unique/patient/D528326B"
											},
											"response": []
										},
										{
											"name": "Unique Patient Appointment (patient upi)-ExpiredToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "314a82d2-73af-4fc8-99a6-98118f1dba7e",
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Response status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Token expiration message is correct\", function () {\r",
															"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "e4b7ffba-720a-4395-8e80-1e2ade127a7b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{ExpiredToken}}",
														"type": "text"
													}
												],
												"url": "{{host}}api/appointment/unique/patient/D528326B"
											},
											"response": []
										}
									],
									"id": "c2818a99-d143-4f08-9507-ec246339a951"
								},
								{
									"name": "Appointment-Update",
									"item": [
										{
											"name": "Update Appointment (uuid)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db5efbf0-a175-46a4-b01c-45cefc8e30e1",
														"exec": [
															"//No body to test for now "
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"id": "f157577b-042a-4657-9896-6a98bee626d1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{super_admin_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{host}}api/appointment/unique/0703CEB9"
											},
											"response": []
										}
									],
									"id": "f2379137-3f55-4911-9065-e86f208c77ee"
								}
							],
							"id": "faf7d8f7-4a51-44cb-a80b-9787ab65f632"
						}
					],
					"id": "683a7103-7da1-4013-92a4-600a9df1e8e9"
				},
				{
					"name": "Diagnosis-FetchAll",
					"item": [
						{
							"name": "fetch-all-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3122cd5d-f42c-4c88-a966-20ed169fd8f2",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"diagnosis\").that.is.an(\"array\").and.to.have.length.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response content is correct\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Diagnosis contains required fields\", function () {\r",
											"    var diagnosis = jsonData.diagnosis[0];\r",
											"    pm.expect(diagnosis).to.have.property(\"_id\").that.is.a(\"string\").and.to.not.be.empty;\r",
											"    pm.expect(diagnosis).to.have.property(\"code\").that.is.a(\"string\").and.to.not.be.empty;\r",
											"    pm.expect(diagnosis).to.have.property(\"name\").that.is.a(\"string\").and.to.not.be.empty;\r",
											"    //pm.expect(diagnosis).to.have.property(\"createdAt\").that.is.a(\"string\"); //.and.to.not.be.empty was not added here because the initial implementation did not have this field, but the update once have. So the system would pull old diagnosis and fail this and the one below.\r",
											"    //pm.expect(diagnosis).to.have.property(\"updatedAt\").that.is.a(\"string\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c39e521d-4572-40f4-b9c7-d6b69e702bf5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{receptionist _token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/diagnosis/fetch"
							},
							"response": []
						},
						{
							"name": "fetch-all-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3122cd5d-f42c-4c88-a966-20ed169fd8f2",
										"exec": [
											"// var jsonData = pm.response.json();\r",
											"\r",
											"// pm.test(\"Response has status code 401\", function () {\r",
											"//     pm.response.to.have.status(401);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response contains expected field\", function () {\r",
											"//     pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response content is correct\", function () {\r",
											"//     pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"// });\r",
											"\r",
											"\r",
											"//This is commented because the endpoint retrieves informaation with out auth\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5312f3b7-c99d-4788-9fa5-068af1fa6934",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{doctor_token_Invalid}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/diagnosis/fetch"
							},
							"response": []
						},
						{
							"name": "fetch-all-ExpiredToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3122cd5d-f42c-4c88-a966-20ed169fd8f2",
										"exec": [
											"// var jsonData = pm.response.json();\r",
											"\r",
											"// pm.test(\"Response status code is 401\", function () {\r",
											"//     pm.response.to.have.status(401);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Token expiration message is correct\", function () {\r",
											"//     pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											"//This is commented because the endpoint retrieves informaation with out auth"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9dac70fd-2532-495e-aabd-ec585faad65b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/diagnosis/fetch"
							},
							"response": []
						}
					],
					"id": "ccd04c0e-3f25-4d31-90ed-dbab13a77c4b"
				},
				{
					"name": "Drugs-FetchGenricDrugs",
					"item": [
						{
							"name": "Fetch generic Drugs-Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response structure is correct\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData).to.have.property(\"generic\").that.is.an(\"array\").and.to.have.length.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Generic drug entry has required fields\", function () {\r",
											"    var genericData = jsonData.generic[0];\r",
											"\r",
											"    pm.expect(genericData).to.be.an(\"object\");\r",
											"    pm.expect(genericData).to.have.property(\"_id\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(genericData).to.have.property(\"generic_id\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    pm.expect(genericData).to.have.property(\"generic\").that.is.a(\"string\").and.to.not.be.null;\r",
											"   // pm.expect(genericData).to.have.property(\"createdAt\").that.is.a(\"string\").and.to.not.be.null;\r",
											"    //pm.expect(genericData).to.have.property(\"updatedAt\").that.is.a(\"string\").and.to.not.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "737f0a1f-4811-42e8-87b6-1abc55283057",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{receptionist _token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic Drugs-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has status code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected field\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response content is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0a066d79-8e44-4a74-b3ff-597b63e95fe5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{receptionist _token_Invalid}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic Drugs-ExpiredToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "70e8f6f5-6416-4b6c-a2af-e284a0065bf9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						},
						{
							"name": "Fetch generic Drugs-NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fca78703-2b4c-483b-bd7b-f6cb666d2be6",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response code is 401\", () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Authorization error message is correct\", () => {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "07639874-043e-47da-9a67-188df876d4df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/drugs/fetch/generic-names"
							},
							"response": []
						}
					],
					"id": "a51290b7-088b-4066-bad0-d48fbc939aeb"
				},
				{
					"name": "Sponsors",
					"item": [
						{
							"name": "FetchSponsor",
							"item": [
								{
									"name": "Fetch Sponsors-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec57eeca-d10f-4546-a90c-228e0c16efcd",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.sponsors).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Sponsor details are valid\", function () {\r",
													"    var sponsor = jsonData.sponsors[0];\r",
													"\r",
													"    pm.expect(sponsor._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(sponsor.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7b969652-3f8b-4a3a-a343-9b73e314d988",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-InValidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f8b468f5-d63a-47d4-b017-5650588a5c9c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "05a76b60-c2f7-4ae4-b717-ce11eade97b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								},
								{
									"name": "Fetch Sponsors-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9e607d3-a5fb-4d54-b330-f08fc672903f",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "a824200a-bdbc-4912-ae28-4bb6e849e960",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch"
									},
									"response": []
								}
							],
							"id": "916010f9-c507-48e6-99d4-559408c10f89"
						},
						{
							"name": "Sponsor-GetAll",
							"item": [
								{
									"name": "All Sponsor Plans",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4e73471-018a-4c04-abcd-e054d7b61677",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains sponsor plans\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.plans).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Plan details are valid\", function () {\r",
													"    var plan = jsonData.plans[0];\r",
													"    \r",
													"    pm.expect(plan._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(plan.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2dcf746b-3271-46f0-b289-e3d70116d7a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								},
								{
									"name": "All Sponsor Plans-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75d5cc47-f7f7-4acc-afbd-c640368f15fb",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5dc6652f-a072-47c6-ab98-ee4bc2f821b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								},
								{
									"name": "All Sponsor Plans-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a250bfe-8058-4e0e-ba3c-55236b7e1de7",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7bd5455f-d5f8-4ff1-9987-926f35c194f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/all/plans"
									},
									"response": []
								}
							],
							"id": "5dab38d1-db6c-4354-86e5-d6ea8b798b7c"
						},
						{
							"name": "Fetch Unique Sponsor (uuid)",
							"item": [
								{
									"name": "Fetch Unique Sponsor (uuid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff9ddcd-d2e9-4277-a456-1f4760a474c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Sponsor data is valid\", function () {\r",
													"    pm.expect(jsonData.sponsor).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.phone).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.contact_email).to.be.a(\"string\").and.to.include(\"@\");\r",
													"    pm.expect(jsonData.sponsor.contact_person).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(jsonData.sponsor.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.sponsor.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "83f9809c-57ed-4449-a80e-351adb463bae",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff9ddcd-d2e9-4277-a456-1f4760a474c4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Sponsor does not exist\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0578113e-5105-474c-8cdd-0d93324f75f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87E"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c47921f-f3b6-4f54-8d74-68015e6e8e58",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bd4f99e1-f34f-4be4-a8c2-c9dad55fa2c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								},
								{
									"name": "Fetch Unique Sponsor (uuid)-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bfe42b5-41a3-4faa-a0ff-acf4d585acc1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "220f97ec-3c84-4439-b266-6bf38a3b9173",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/87EDF987"
									},
									"response": []
								}
							],
							"id": "535b1ce0-63c4-43c9-a0fe-166a51b50f5b"
						},
						{
							"name": "Get Unique Plan by Name",
							"item": [
								{
									"name": "Get Unique Plan by Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.plan).to.be.an(\"object\").and.to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Plan details are valid\", function () {\r",
													"    var plan = jsonData.plan;\r",
													"\r",
													"    pm.expect(plan._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(plan.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(plan.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "33ed10ad-0569-446d-b757-3ee18fa3ad65",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name- NotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response indicates failure\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.be.a(\"string\").and.to.eql(\"Sponsor Plan does not exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "77b1948f-af8a-4ffa-8878-50a12fd55f5c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAM"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ad2a17e9-a16d-45b8-baf0-b255f724c4dd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0688c17f-060d-4b16-85d6-c2bb15b90259",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								},
								{
									"name": "Get Unique Plan by Name-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e51f0ac8-92e6-401a-8215-96273348cf13",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9803bbde-60f3-41fd-aa6e-91604c83b41e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/sponsor/fetch/plan/FAMACARE PRICELIST"
									},
									"response": []
								}
							],
							"id": "f8ae6aee-2a3d-4251-83a8-7d4e0e0a7606"
						}
					],
					"id": "b04ffdc7-4fdb-430a-85cb-acf9b1dca54e"
				},
				{
					"name": "Services",
					"item": [
						{
							"name": "Service-Create",
							"item": [
								{
									"name": "Create-Service-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is success\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Service Added successfully\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "55f8d542-835a-4c2e-a8cc-b8e693876912",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{doctor_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cer33\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "12ee85f6-6e2d-4f05-97d8-57f2995c8105",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry3\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f8332d71-2834-4a8b-b0d3-3150250327f8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bc684186-99d4-46be-afdb-a889dd0e025d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{super_admin_token_Invalid}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-InvalidPrice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains validation errors\", function () {\r",
													"    pm.expect(jsonData.errors).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message for price field is correct\", function () {\r",
													"    pm.expect(jsonData.errors[0]).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(jsonData.errors[0].path).to.eql(\"price\");\r",
													"    pm.expect(jsonData.errors[0].msg).to.eql(\"Price must be a number\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9f15cf07-c033-4f7b-84f8-dd3e1d5c4353",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":\"wqwqq\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-SponsorNotFound",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae93e59-5a6d-407e-80e4-950b2752450e",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor not found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "43e442d4-40be-4726-9606-fce135afe18b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Kanu Investigations\",\n    \"name\":\"Cry\",\n    \"sponsor_uuid\":\"\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								},
								{
									"name": "Create-Service-AlreadyExist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd60acee-857a-42d0-9ebe-485ffcf2b289",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Response status is failed\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"Service Already Exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "95743fcd-42e1-4fc5-8e15-6f8e5a04ddcb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"type\":\"Pathology Investigations\",\n    \"name\":\"Urea\",\n    \"sponsor_uuid\":\"D773AAFB\",\n    \"plan_code\":\"3A9A51C7\",\n    \"price\":2000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{host}}api/service/addservice"
									},
									"response": []
								}
							],
							"id": "1274b15c-ef4f-4729-8176-985dda674e93"
						},
						{
							"name": "fetch all services",
							"item": [
								{
									"name": "fetch all services-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains services\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.services).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Service details are valid\", function () {\r",
													"    var service = jsonData.services[0];\r",
													"\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"   // pm.expect(service.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    //pm.expect(service.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "301166b6-b012-4cf7-be96-4f22a32bac30",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "758dab0b-95e8-4500-b057-1dacddf94a4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "97e045a5-6c69-477f-9c93-da69a2b2c62e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								},
								{
									"name": "fetch all services-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0948df-fa86-4a54-973b-b9da7d5f61a0",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b96669d5-8c66-4c59-a8a3-17cd369b4984",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch"
									},
									"response": []
								}
							],
							"id": "d4d22c76-05b9-455d-ac47-44eb2b66a072"
						},
						{
							"name": "fetch all services by type",
							"item": [
								{
									"name": "Fetch Service by type-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains services\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.services).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Service details are valid\", function () {\r",
													"    var service = jsonData.services[0];\r",
													"\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.be.above(0);\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"   // pm.expect(service.createdAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"    //pm.expect(service.updatedAt).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2ef0012a-a856-4681-959c-fa31cddc2194",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b985ca2b-1787-4a4f-8671-219e5da301d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b44ba80c-e9c0-4535-9bc8-77240a36ba46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7d911ffe-df8a-49f7-94aa-4796899258ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imaging Investigation"
									},
									"response": []
								},
								{
									"name": "Fetch Service by type-InvalidServiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e5b9882-24f2-4022-a4f6-9ce7f4f061ae",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"type must be Pathology Investigations, Imaging Investigation or Service\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "338a00b9-c86a-4d07-9674-521147c387bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/fetch/Imcccc"
									},
									"response": []
								}
							],
							"id": "f2f78ffb-0e2b-41c2-8a51-5ad24cb0449f"
						},
						{
							"name": "Investigation by plan_code",
							"item": [
								{
									"name": "Get Investigation by plan_code -Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains investigations\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.investigations).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Investigation details are valid\", function () {\r",
													"    var investigation = jsonData.investigations[0];\r",
													"\r",
													"    pm.expect(investigation).to.be.an(\"object\").and.to.not.be.null;\r",
													"    pm.expect(investigation._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.price).to.be.a(\"number\").and.to.be.above(0).and.to.not.be.null;\r",
													"    pm.expect(investigation.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(investigation.is_Active).to.be.a(\"boolean\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5f0a1a79-a680-43a1-a938-5e6fcad55c98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "7a92f465-be5c-4e9d-82ad-a0ca4a748ac0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-ExpireToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6d558ff8-63e0-42aa-b6e3-0d4e15ac6a4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "509aff46-ad90-4fc2-92f1-c0fae7826db0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Investigation by plan_code-InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1058e740-af78-45cc-a727-7d9156731148",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5caa223b-dac8-43a2-b73d-bdf4008d5a6a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/investigations/3A9"
									},
									"response": []
								}
							],
							"id": "08b39964-6247-418b-9e12-1a879fe3a318"
						},
						{
							"name": "Imaging by plan_code",
							"item": [
								{
									"name": "Get Imaging by plan_code-successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains imaging data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.imaging).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Imaging details are valid\", function () {\r",
													"    var imaging = jsonData.imaging[0];\r",
													"\r",
													"    pm.expect(imaging.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(imaging._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.price).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(imaging.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(imaging.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2bb84d3e-c7d8-4487-8fc2-3e8a2d855afa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-NoToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "299cacce-11d8-40f3-bb99-ba5888fa6faa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-ExpiredToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e8862146-db2b-40e2-a99b-ca276ff3fb80",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code -InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ba10d0b6-3b7d-4037-b4df-4092834a586e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get Imaging by plan_code-InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04db9080-64f3-4707-9d2d-23253b0bbb95",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "e5def174-132a-40da-819e-9fcfdf9dfbe0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/imaging/3333"
									},
									"response": []
								}
							],
							"id": "cf86ddce-e7d2-45e8-bc89-e0b2fc1b9318"
						},
						{
							"name": "Otherservice by plan_code",
							"item": [
								{
									"name": "Get otherservice by plan_code-Successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains other service data\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"success\");\r",
													"    pm.expect(jsonData.otherservice).to.be.an(\"array\").and.to.have.length.above(0);\r",
													"});\r",
													"\r",
													"pm.test(\"Other service details are valid\", function () {\r",
													"    var service = jsonData.otherservice[0];\r",
													"\r",
													"    pm.expect(service.is_Active).to.be.a(\"boolean\");\r",
													"    pm.expect(service._id).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.type).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.name).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.price).to.be.a(\"number\").and.to.not.be.null;\r",
													"    pm.expect(service.sponsor_uuid).to.be.a(\"string\").and.to.not.be.null;\r",
													"    pm.expect(service.plan_code).to.be.a(\"string\").and.to.not.be.null;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "9fe5e388-4eea-40cf-b73e-cb67d6a77dd4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-NoCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Authorization error message is correct\", () => {\r",
													"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "82255c62-c053-4d13-b5f2-12a92f51f463",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-ExpiredCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Token expiration message is correct\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6aee939b-364d-4beb-a2b0-e30b2b833e67",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{ExpiredToken}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code-InvalidToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains error message\", function () {\r",
													"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "14a1f3f7-c246-4c5d-9137-c72646b604c2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token_Invalid}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C7"
									},
									"response": []
								},
								{
									"name": "Get otherservice by plan_code_InvalidPlanCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f183ac6b-0d00-4682-97cb-fbbb9292b5b5",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response status is 400\", function () {\r",
													"    pm.expect(pm.response.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Error message is correct\", function () {\r",
													"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
													"    pm.expect(jsonData.error).to.eql(\"Sponsor plan does not exists\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0fbece1f-28da-482c-a1d6-2bf501681f4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{receptionist _token}}",
												"type": "text"
											}
										],
										"url": "{{host}}api/service/otherservices/3A9A51C766"
									},
									"response": []
								}
							],
							"id": "16c4f66e-40ab-402f-b5a6-abe70d31129b"
						}
					],
					"id": "d7828e06-f4f9-4d35-ba12-76e7a6a6f55a"
				}
			],
			"id": "9963e146-a814-4f7f-ab56-cb1594a3bd94"
		},
		{
			"name": "Consultation",
			"item": [
				{
					"name": "Get Doctor consultation",
					"id": "4d9e9a47-5e96-422e-a80a-fa3c75c7c9ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImVkaWRpb25nLmJvYnNvbkBhc2tuZWxsby5jb20iLCJyb2xlIjoiU3VwZXIgQWRtaW4iLCJpYXQiOjE3NDEwODg4NjQsImV4cCI6MTc0MTExNzY2NH0.bQCEyFhS-6HN4wISN4bPeS4gEeYiK5z5F0BhY8LtMlk",
								"type": "text"
							}
						],
						"url": "{{host}}api/consultation/doctor/9w3tzr"
					},
					"response": []
				}
			],
			"id": "edec7600-760e-4041-b044-150786dd3a1a"
		},
		{
			"name": "Encounter",
			"item": [
				{
					"name": "Create Encounter",
					"item": [
						{
							"name": "Create - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff555572-a4c6-4ba0-9599-4a661e5f3b62",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is success\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"A successful message is displayed\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Encounter saved successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fd6de753-5b55-42c9-be03-03e0048a8c55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"payment_policy\": \"claims\",\n  \"patient\": \"6751645ec79ac1e69bc7efb8\",\n  \"consultant\": \"Dr. Dr Chibuzor Nwogu\",\n  \"isUrgent\": true,\n  \"appointment_uuid\":\"M528326B\",\n  \"comment\": \"Patient is experiencing severe headache\",\n  \"status\": \"awaiting billing\",\n  \"vitals\": {\n    \"height\":160,\n    \"weight\":70,\n    \"blood_pressure\": \"80\",\n    \"pulse_rate\": 75,\n    \"temperature\": 98.6\n  },\n  \"allergies\": {\n    \"drugs\": [\"penicillin\"],\n    \"food\": [\"nuts\"],\n    \"other\": [\"dust\"]\n  },\n  \"symptoms\": [\"headache\", \"nausea\", \"dizziness\"],\n  \"family_history\": [\"diabetes\", \"hypertension\"],\n  \"social_history\": [\"smoking\", \"alcohol\"],\n  \"diagnosis\": [\n    {\n        \"name\":\"Common Cold\",\n        \"suspected\":false\n  },\n\n   {\n        \"name\":\"Typhoid fever\",\n        \"suspected\":true\n  }\n  ],\n  \"investigations\": [\n    {\"name\":\"Fasting Blood Glucose(FBS)\",\"amount\":2000},\n     {\"name\":\"Haemoglobin (HB)\",\"amount\":5000}\n  ],\n  \"imaging\": [\n     {\"name\":\"Both Feet\",\"amount\":7000},\n     {\"name\":\"Both Knee\",\"amount\":7000}\n  ],\n  \"otherservices\": [\n    {\"name\":\"Cast Removal\",\"amount\":7500}\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}api/encounter/submit",
									"host": [
										"{{host}}api"
									],
									"path": [
										"encounter",
										"submit"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "Bearer {{token}}",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create - Invalid-Patient-ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff555572-a4c6-4ba0-9599-4a661e5f3b62",
										"exec": [
											"//This would be updated after fix\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "914d7acd-69ba-4855-b457-90adc5a137d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"payment_policy\": \"claims\",\n  \"patient\": \"6751645ec79ac1e69bcfgfgfgf\",\n  \"consultant\": \"Dr. Dr Chibuzor Nwogu\",\n  \"isUrgent\": true,\n  \"appointment_uuid\":\"D528326B\",\n  \"comment\": \"Patient is experiencing severe headache\",\n  \"status\": \"awaiting billing\",\n  \"vitals\": {\n    \"height\":160,\n    \"weight\":70,\n    \"blood_pressure\": \"80\",\n    \"pulse_rate\": 75,\n    \"temperature\": 98.6\n  },\n  \"allergies\": {\n    \"drugs\": [\"penicillin\"],\n    \"food\": [\"nuts\"],\n    \"other\": [\"dust\"]\n  },\n  \"symptoms\": [\"headache\", \"nausea\", \"dizziness\"],\n  \"family_history\": [\"diabetes\", \"hypertension\"],\n  \"social_history\": [\"smoking\", \"alcohol\"],\n  \"diagnosis\": [\n    {\n        \"name\":\"Common Cold\",\n        \"suspected\":false\n  },\n\n   {\n        \"name\":\"Typhoid fever\",\n        \"suspected\":true\n  }\n  ],\n  \"investigations\": [\n    {\"name\":\"Fasting Blood Glucose(FBS)\",\"amount\":2000},\n     {\"name\":\"Haemoglobin (HB)\",\"amount\":5000}\n  ],\n  \"imaging\": [\n     {\"name\":\"Both Feet\",\"amount\":7000},\n     {\"name\":\"Both Knee\",\"amount\":7000}\n  ],\n  \"otherservices\": [\n    {\"name\":\"Cast Removal\",\"amount\":7500}\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}api/encounter/submit",
									"host": [
										"{{host}}api"
									],
									"path": [
										"encounter",
										"submit"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "Bearer {{token}}",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create - NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff555572-a4c6-4ba0-9599-4a661e5f3b62",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates missing token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fd657b93-19b6-4b98-8d1e-80565531b24e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"payment_policy\": \"claims\",\n  \"patient\": \"6751645ec79ac1e69bc7efb8\",\n  \"consultant\": \"Dr. Dr Chibuzor Nwogu\",\n  \"isUrgent\": true,\n  \"appointment_uuid\":\"D528326B\",\n  \"comment\": \"Patient is experiencing severe headache\",\n  \"status\": \"awaiting billing\",\n  \"vitals\": {\n    \"height\":160,\n    \"weight\":70,\n    \"blood_pressure\": \"80\",\n    \"pulse_rate\": 75,\n    \"temperature\": 98.6\n  },\n  \"allergies\": {\n    \"drugs\": [\"penicillin\"],\n    \"food\": [\"nuts\"],\n    \"other\": [\"dust\"]\n  },\n  \"symptoms\": [\"headache\", \"nausea\", \"dizziness\"],\n  \"family_history\": [\"diabetes\", \"hypertension\"],\n  \"social_history\": [\"smoking\", \"alcohol\"],\n  \"diagnosis\": [\n    {\n        \"name\":\"Common Cold\",\n        \"suspected\":false\n  },\n\n   {\n        \"name\":\"Typhoid fever\",\n        \"suspected\":true\n  }\n  ],\n  \"investigations\": [\n    {\"name\":\"Fasting Blood Glucose(FBS)\",\"amount\":2000},\n     {\"name\":\"Haemoglobin (HB)\",\"amount\":5000}\n  ],\n  \"imaging\": [\n     {\"name\":\"Both Feet\",\"amount\":7000},\n     {\"name\":\"Both Knee\",\"amount\":7000}\n  ],\n  \"otherservices\": [\n    {\"name\":\"Cast Removal\",\"amount\":7500}\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}api/encounter/submit",
									"host": [
										"{{host}}api"
									],
									"path": [
										"encounter",
										"submit"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create- Invalid-UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42b507da-90c0-4d3e-843c-1190d2096259",
										"exec": [
											"//This would be upadted when the endpoint is fixed"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a095bb4d-7004-443c-93fb-0814790b12f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"payment_policy\": \"claims\",\n  \"patient\": \"6751645ec79ac1e69bc7efb8\",\n  \"consultant\": \"Dr. Dr Chibuzor Nwogu\",\n  \"isUrgent\": true,\n  \"appointment_uuid\":\"D52hjkkuujhh\",\n  \"comment\": \"Patient is experiencing severe headache\",\n  \"status\": \"awaiting billing\",\n  \"vitals\": {\n    \"height\":160,\n    \"weight\":70,\n    \"blood_pressure\": \"80\",\n    \"pulse_rate\": 75,\n    \"temperature\": 98.6\n  },\n  \"allergies\": {\n    \"drugs\": [\"penicillin\"],\n    \"food\": [\"nuts\"],\n    \"other\": [\"dust\"]\n  },\n  \"symptoms\": [\"headache\", \"nausea\", \"dizziness\"],\n  \"family_history\": [\"diabetes\", \"hypertension\"],\n  \"social_history\": [\"smoking\", \"alcohol\"],\n  \"diagnosis\": [\n    {\n        \"name\":\"Common Cold\",\n        \"suspected\":false\n  },\n\n   {\n        \"name\":\"Typhoid fever\",\n        \"suspected\":true\n  }\n  ],\n  \"investigations\": [\n    {\"name\":\"Fasting Blood Glucose(FBS)\",\"amount\":2000},\n     {\"name\":\"Haemoglobin (HB)\",\"amount\":5000}\n  ],\n  \"imaging\": [\n     {\"name\":\"Both Feet\",\"amount\":7000},\n     {\"name\":\"Both Knee\",\"amount\":7000}\n  ],\n  \"otherservices\": [\n    {\"name\":\"Cast Removal\",\"amount\":7500}\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}api/encounter/submit",
									"host": [
										"{{host}}api"
									],
									"path": [
										"encounter",
										"submit"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "Bearer {{token}}",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7869fbb1-36d0-466e-9e06-f917c5054bc0",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates invalid token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9825feb1-cc5f-486f-87d3-801bf2f8c3ee",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token_Invalid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"payment_policy\": \"\",\n  \"patient\": \"6751645ec79ac1e69bc7efb8\",\n  \"consultant\": \"Dr. Dr Chibuzor Nwogu\",\n  \"isUrgent\": true,\n  \"appointment_uuid\":\"D528326B\",\n  \"comment\": \"Patient is experiencing severe headache\",\n  \"status\": \"awaiting billing\",\n  \"vitals\": {\n    \"height\":160,\n    \"weight\":70,\n    \"blood_pressure\": \"80\",\n    \"pulse_rate\": 75,\n    \"temperature\": 98.6\n  },\n  \"allergies\": {\n    \"drugs\": [\"penicillin\"],\n    \"food\": [\"nuts\"],\n    \"other\": [\"dust\"]\n  },\n  \"symptoms\": [\"headache\", \"nausea\", \"dizziness\"],\n  \"family_history\": [\"diabetes\", \"hypertension\"],\n  \"social_history\": [\"smoking\", \"alcohol\"],\n  \"diagnosis\": [\n    {\n        \"name\":\"Common Cold\",\n        \"suspected\":false\n  },\n\n   {\n        \"name\":\"Typhoid fever\",\n        \"suspected\":true\n  }\n  ],\n  \"investigations\": [\n    {\"name\":\"Fasting Blood Glucose(FBS)\",\"amount\":2000},\n     {\"name\":\"Haemoglobin (HB)\",\"amount\":5000}\n  ],\n  \"imaging\": [\n     {\"name\":\"Both Feet\",\"amount\":7000},\n     {\"name\":\"Both Knee\",\"amount\":7000}\n  ],\n  \"otherservices\": [\n    {\"name\":\"Cast Removal\",\"amount\":7500}\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}api/encounter/submit",
									"host": [
										"{{host}}api"
									],
									"path": [
										"encounter",
										"submit"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "Bearer {{token}}",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-ExpiredToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e7816b5-4ed2-4481-974f-776dd7483d08",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1795ba0b-73bf-4448-b086-093b980f2d22",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"payment_policy\": \"\",\n  \"patient\": \"6751645ec79ac1e69bc7efb8\",\n  \"consultant\": \"Dr. Dr Chibuzor Nwogu\",\n  \"isUrgent\": true,\n  \"appointment_uuid\":\"D528326B\",\n  \"comment\": \"Patient is experiencing severe headache\",\n  \"status\": \"awaiting billing\",\n  \"vitals\": {\n    \"height\":160,\n    \"weight\":70,\n    \"blood_pressure\": \"80\",\n    \"pulse_rate\": 75,\n    \"temperature\": 98.6\n  },\n  \"allergies\": {\n    \"drugs\": [\"penicillin\"],\n    \"food\": [\"nuts\"],\n    \"other\": [\"dust\"]\n  },\n  \"symptoms\": [\"headache\", \"nausea\", \"dizziness\"],\n  \"family_history\": [\"diabetes\", \"hypertension\"],\n  \"social_history\": [\"smoking\", \"alcohol\"],\n  \"diagnosis\": [\n    {\n        \"name\":\"Common Cold\",\n        \"suspected\":false\n  },\n\n   {\n        \"name\":\"Typhoid fever\",\n        \"suspected\":true\n  }\n  ],\n  \"investigations\": [\n    {\"name\":\"Fasting Blood Glucose(FBS)\",\"amount\":2000},\n     {\"name\":\"Haemoglobin (HB)\",\"amount\":5000}\n  ],\n  \"imaging\": [\n     {\"name\":\"Both Feet\",\"amount\":7000},\n     {\"name\":\"Both Knee\",\"amount\":7000}\n  ],\n  \"otherservices\": [\n    {\"name\":\"Cast Removal\",\"amount\":7500}\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}api/encounter/submit",
									"host": [
										"{{host}}api"
									],
									"path": [
										"encounter",
										"submit"
									],
									"query": [
										{
											"key": "Authorization",
											"value": "Bearer {{token}}",
											"type": "text",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "2293cd75-9775-47ba-b538-e694a3964899"
				},
				{
					"name": "Fetch ALL Encounter",
					"item": [
						{
							"name": "Fetch All Encounter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfa6efb-9083-4694-8804-b80f11f26693",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is success\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Encounters list is not empty\", function () {\r",
											"    pm.expect(jsonData.encounters).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Each encounter contains required fields\", function () {\r",
											"    jsonData.encounters.forEach(encounter => {\r",
											"        pm.expect(encounter).to.have.property(\"uuid\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"consultant\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"status\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"symptoms\").that.is.an(\"array\");\r",
											"        pm.expect(encounter).to.have.property(\"diagnosis\").that.is.an(\"array\");\r",
											"        pm.expect(encounter.vitals).to.have.property(\"weight\").that.is.a(\"number\");\r",
											"        pm.expect(encounter.vitals).to.have.property(\"height\").that.is.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check payment policy is either 'cash' or 'claims'\", function () {\r",
											"    jsonData.encounters.forEach(encounter => {\r",
											"        pm.expect([\"cash\", \"claims\"]).to.include(encounter.payment_policy);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aba54700-004b-435f-924f-87273a907595",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/fetch-all"
							},
							"response": []
						},
						{
							"name": "Fetch All Encounter-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfa6efb-9083-4694-8804-b80f11f26693",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates invalid token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f1b955c0-6059-499c-937b-89be79a7fd73",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token_Invalid}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/fetch-all"
							},
							"response": []
						},
						{
							"name": "Fetch All Encounter - ExpiredToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfa6efb-9083-4694-8804-b80f11f26693",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ef0e533c-e798-4267-bcb6-135037791994",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/fetch-all"
							},
							"response": []
						},
						{
							"name": "Fetch All Encounter - NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfa6efb-9083-4694-8804-b80f11f26693",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates missing token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d798f411-81fe-4a8f-84ba-65ab570114f4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/encounter/fetch-all"
							},
							"response": []
						}
					],
					"id": "eee1452e-b4c0-4266-9601-8482d37ff104"
				},
				{
					"name": "Unique Encounter (uuid)",
					"item": [
						{
							"name": "Get Unique Encounter (uuid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e8a0e16-937b-460f-b3d7-5f39c5405053",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is success\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Encounter object exists\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"encounter\").that.is.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Encounter contains required fields\", function () {\r",
											"    let encounter = jsonData.encounter;\r",
											"    pm.expect(encounter).to.have.property(\"uuid\").that.is.a(\"string\");\r",
											"    pm.expect(encounter).to.have.property(\"consultant\").that.is.a(\"string\");\r",
											"    pm.expect(encounter).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(encounter).to.have.property(\"symptoms\").that.is.an(\"array\");\r",
											"    pm.expect(encounter).to.have.property(\"diagnosis\").that.is.an(\"array\");\r",
											"    pm.expect(encounter).to.have.property(\"payment_policy\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Vitals contain valid data\", function () {\r",
											"    let vitals = jsonData.encounter.vitals;\r",
											"    pm.expect(vitals).to.have.property(\"weight\").that.is.a(\"number\");\r",
											"    pm.expect(vitals).to.have.property(\"height\").that.is.a(\"number\");\r",
											"    pm.expect(vitals).to.have.property(\"blood_pressure\").that.is.a(\"string\");\r",
											"    pm.expect(vitals).to.have.property(\"temperature\").that.is.a(\"number\");\r",
											"    pm.expect(vitals).to.have.property(\"pulse_rate\").that.is.a(\"number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Payment policy is valid\", function () {\r",
											"    pm.expect([\"cash\", \"claims\"]).to.include(jsonData.encounter.payment_policy);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0254b1ea-30d4-47de-bfda-f8edc179badb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/fetch/9E9E9F56"
							},
							"response": []
						},
						{
							"name": "Get Unique Encounter (uuid) -Does-Not-Exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e8a0e16-937b-460f-b3d7-5f39c5405053",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is failed\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(jsonData.error).to.eql(\"Encounter does not exists\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6cc3fde4-2ecd-408a-8a0c-4e117b9c98da",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/fetch/9E9E9"
							},
							"response": []
						},
						{
							"name": "Get Unique Encounter (uuid) -ExpireToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e8a0e16-937b-460f-b3d7-5f39c5405053",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4652d38e-0ec6-454e-b215-58e8b36c50a5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/fetch/9E9E9F56"
							},
							"response": []
						},
						{
							"name": "Get Unique Encounter (uuid)- NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e8a0e16-937b-460f-b3d7-5f39c5405053",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates missing token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8e98c521-8609-4958-92ff-5f18bb7867dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/encounter/fetch/9E9E9F56"
							},
							"response": []
						}
					],
					"id": "a6d686e3-b2fe-46b2-8e05-52f827095ee4"
				},
				{
					"name": "Encounters by patient id",
					"item": [
						{
							"name": "Encounters by patient id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1274b668-8942-457a-9bd1-9ba09ed56774",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is success\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Encounters array exists and is not empty\", function () {\r",
											"    pm.expect(jsonData.encounters).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Each encounter contains required fields\", function () {\r",
											"    jsonData.encounters.forEach(encounter => {\r",
											"        pm.expect(encounter).to.have.property(\"uuid\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"consultant\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"status\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"symptoms\").that.is.an(\"array\");\r",
											"        pm.expect(encounter).to.have.property(\"diagnosis\").that.is.an(\"array\");\r",
											"        pm.expect(encounter).to.have.property(\"payment_policy\").that.is.a(\"string\");\r",
											"        pm.expect(encounter.vitals).to.have.property(\"weight\").that.is.a(\"number\");\r",
											"        pm.expect(encounter.vitals).to.have.property(\"height\").that.is.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Ensure payment policy is valid\", function () {\r",
											"    jsonData.encounters.forEach(encounter => {\r",
											"        pm.expect([\"cash\", \"claims\"]).to.include(encounter.payment_policy);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7acf9195-04fc-4994-b3cd-06a60529a0bf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/patient/67503403416dcd28a3945453"
							},
							"response": []
						},
						{
							"name": "Encounters by patient id -Invalid-PatientID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1274b668-8942-457a-9bd1-9ba09ed56774",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is failed\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"failed\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is correct\", function () {\r",
											"    pm.expect(jsonData.error).to.eql(\"Invalid patient ID format\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "da346478-d87e-4f51-b795-f8922ee8bb52",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/patient/67503403416dcd28a39"
							},
							"response": []
						},
						{
							"name": "Encounters by patient id- InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1274b668-8942-457a-9bd1-9ba09ed56774",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e89ee17b-803f-4084-a4ee-cdcdcb270ec2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/patient/67503403416dcd28a3945453"
							},
							"response": []
						},
						{
							"name": "Encounters by patient id- NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1274b668-8942-457a-9bd1-9ba09ed56774",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates missing token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c91a1c7f-604f-41b1-b43c-76546b16571d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/encounter/patient/67503403416dcd28a3945453"
							},
							"response": []
						}
					],
					"id": "1ace5d35-b4bc-4542-b4a6-aa310ca1cf53"
				},
				{
					"name": "encounter by billing status",
					"item": [
						{
							"name": "Get encounter by billing status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfbb9d2-f316-4a19-bcfe-645f34ab2fbd",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is success\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Encounters list is not empty\", function () {\r",
											"    pm.expect(jsonData.encounters).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Each encounter contains required fields\", function () {\r",
											"    jsonData.encounters.forEach(encounter => {\r",
											"        pm.expect(encounter).to.have.property(\"uuid\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"consultant\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"status\").that.is.a(\"string\");\r",
											"        pm.expect(encounter).to.have.property(\"symptoms\").that.is.an(\"array\");\r",
											"        pm.expect(encounter).to.have.property(\"diagnosis\").that.is.an(\"array\");\r",
											"        pm.expect(encounter.vitals).to.have.property(\"weight\").that.is.a(\"number\");\r",
											"        pm.expect(encounter.vitals).to.have.property(\"height\").that.is.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check payment policy is either 'cash' or 'claims'\", function () {\r",
											"    jsonData.encounters.forEach(encounter => {\r",
											"        pm.expect([\"cash\", \"claims\"]).to.include(encounter.payment_policy);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ae3e8f33-ada5-4f23-ac2d-7e4ee6954af7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/billing/awaiting billing"
							},
							"response": []
						},
						{
							"name": "Get encounter by billing status-InvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfbb9d2-f316-4a19-bcfe-645f34ab2fbd",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates invalid token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token is not valid\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "21346705-22f9-4f40-9452-2e2d5c61629d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token_Invalid}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/billing/awaiting billing"
							},
							"response": []
						},
						{
							"name": "Get encounter by billing status-ExpiredToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfbb9d2-f316-4a19-bcfe-645f34ab2fbd",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Token expiration message is correct\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"Token has expired\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "432a5f01-d0ff-4ff8-9997-4a66336351b9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{ExpiredToken}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/billing/awaiting billing"
							},
							"response": []
						},
						{
							"name": "Get encounter by billing status - NoToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bfbb9d2-f316-4a19-bcfe-645f34ab2fbd",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message indicates missing token\", function () {\r",
											"    pm.expect(jsonData.message).to.eql(\"No token, authorization denied\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9fa344ae-0329-43ee-bff2-0ad662082d77",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{host}}api/encounter/billing/awaiting billing"
							},
							"response": []
						}
					],
					"id": "aa6e571b-2a5f-4830-a25d-f0cec15c3230"
				},
				{
					"name": "Unique Encounter by (appointment_uuid)",
					"item": [
						{
							"name": "Unique Encounter by (appointment_uuid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "478b2e4c-41ec-42c8-bd24-5ed5947d64a7",
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response status is success\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Encounter object exists\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"encounter\").that.is.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"Encounter contains required fields\", function () {\r",
											"    let encounter = jsonData.encounter;\r",
											"    pm.expect(encounter).to.have.property(\"uuid\").that.is.a(\"string\");\r",
											"    pm.expect(encounter).to.have.property(\"consultant\").that.is.a(\"string\");\r",
											"    pm.expect(encounter).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(encounter).to.have.property(\"symptoms\").that.is.an(\"array\");\r",
											"    pm.expect(encounter).to.have.property(\"diagnosis\").that.is.an(\"array\");\r",
											"    pm.expect(encounter).to.have.property(\"payment_policy\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Vitals contain valid data\", function () {\r",
											"    let vitals = jsonData.encounter.vitals;\r",
											"    pm.expect(vitals).to.have.property(\"weight\").that.is.a(\"number\");\r",
											"    pm.expect(vitals).to.have.property(\"height\").that.is.a(\"number\");\r",
											"    pm.expect(vitals).to.have.property(\"blood_pressure\").that.is.a(\"string\");\r",
											"    pm.expect(vitals).to.have.property(\"temperature\").that.is.a(\"number\");\r",
											"    pm.expect(vitals).to.have.property(\"pulse_rate\").that.is.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Patient object contains required fields\", function () {\r",
											"    let patient = jsonData.encounter.patient;\r",
											"    pm.expect(patient).to.have.property(\"fullname\").that.is.a(\"string\");\r",
											"    pm.expect(patient).to.have.property(\"email\").that.is.a(\"string\");\r",
											"    pm.expect(patient).to.have.property(\"phone\").that.is.a(\"string\");\r",
											"    pm.expect(patient).to.have.property(\"address\").that.is.a(\"string\");\r",
											"    pm.expect(patient).to.have.property(\"gender\").that.is.a(\"string\");\r",
											"    pm.expect(patient).to.have.property(\"dob\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Payment policy is valid\", function () {\r",
											"    pm.expect([\"cash\", \"claims\"]).to.include(jsonData.encounter.payment_policy);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c591a6ae-575c-431f-b4f8-2552210a1e45",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/unique/M528326B"
							},
							"response": []
						},
						{
							"name": "Unique Encounter by (appointment_uuid) - NotFound",
							"id": "020c0ea8-a9e9-4ae9-bffb-26003c9436fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/unique/M5283"
							},
							"response": []
						},
						{
							"name": "Unique Encounter by (appointment_uuid) Copy",
							"id": "919b52f4-2018-4496-b00b-53722e1cb750",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/unique/M528326B"
							},
							"response": []
						},
						{
							"name": "Unique Encounter by (appointment_uuid) Copy",
							"id": "92e6a62d-5b69-4027-af53-fade505428cc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{super_admin_token}}",
										"type": "text"
									}
								],
								"url": "{{host}}api/encounter/unique/M528326B"
							},
							"response": []
						}
					],
					"id": "1c3008e3-5c89-4f72-8456-e01628da495b"
				},
				{
					"name": "New Folder",
					"item": [
						{
							"name": "Update Encounter by (appointment_uuid)",
							"id": "428500cc-6be5-480a-8737-427d24865cce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n    \"vitals\": {\n            \"weight\": 77,\n            \"height\": 150,\n            \"blood_pressure\": \"67\",\n            \"temperature\": 20,\n            \"pulse_rate\": 20\n        },\n\n        \"allergies\": {\n            \"drugs\": [\n                \"Penicillin\"\n            ],\n            \"food\": [\n                \"Peanuts\"\n            ],\n            \"other\": [\n                \"Detergents\"\n            ]\n        },\n     \"symptoms\": [\n            \"Cough\",\n            \"Sneezing\"\n        ],\n        \"family_history\": [\n            \"Brugada Syndrome\"\n        ],\n        \"social_history\": [\n            \"Vaping or E-Cigarette Use\"\n        ],\n        \"diagnosis\": [\n            {\n                \"name\": \"Unspecified malaria\",\n                \"suspected\": true,\n                \"_id\": \"67b75860fdbab15b95142478\"\n            },\n            {\n                \"name\": \"Cold injury syndrome\",\n                \"suspected\": false,\n                \"_id\": \"67b75860fdbab15b95142479\"\n            }\n        ],\n        \"investigations\": [\n            {\n                \"name\": \"Faecal Occult Blood(FOB)\",\n                \"amount\": 3000,\n                \"billing_status\": null,\n                \"_id\": \"67b75860fdbab15b9514247a\"\n            },\n            {\n                \"name\": \"Blood Group\",\n                \"amount\": 2000,\n                \"billing_status\": null,\n                \"_id\": \"67b75860fdbab15b9514247b\"\n            }\n        ],\n        \"imaging\": [\n            {\n                \"name\": \"Both Feet\",\n                \"amount\": 7000,\n                \"billing_status\": null,\n                \"_id\": \"67b75860fdbab15b9514247c\"\n            }\n        ],\n        \"otherservices\": [\n            {\n                \"name\": \"Cast Removal\",\n                \"amount\": 7500,\n                \"billing_status\": null,\n                \"_id\": \"67b75860fdbab15b9514247d\"\n            },\n            {\n                \"name\": \"COLD APPLICATION\",\n                \"amount\": 2500,\n                \"billing_status\": null,\n                \"_id\": \"67b75860fdbab15b9514247e\"\n            }\n        ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:5000/api/encounter/unique/AF388D54"
							},
							"response": []
						}
					],
					"id": "d0eeba15-91b1-41f5-9a5d-dcba6162a01b"
				}
			],
			"id": "12efb224-3c54-4465-8486-b0cf3611c3bc"
		}
	]
}